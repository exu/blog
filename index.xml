<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jacek Wysocki DevLog</title>
    <link>http://wysocki.in/</link>
    <description>Recent content on Jacek Wysocki DevLog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Feb 2016 08:30:38 +0100</lastBuildDate>
    <atom:link href="http://wysocki.in/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TIL: PHP - Twig needs_environment need env as first parameter</title>
      <link>http://wysocki.in/til/til-php-twig-needs_environment-option</link>
      <pubDate>Thu, 11 Feb 2016 08:30:38 +0100</pubDate>
      
      <guid>http://wysocki.in/til/til-php-twig-needs_environment-option</guid>
      <description>

&lt;h1 id=&#34;php-twig-function-configuration:7de3802ebdaaf53d0004797c024334ae&#34;&gt;PHP Twig function configuration&lt;/h1&gt;

&lt;p&gt;If there is &amp;lsquo;needs_environment&amp;rsquo; option in twig function definition you&amp;rsquo;ll need to pass
Twig_Environment as first parameter to your mapped twig function&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;new \Twig_Function_Method(
    $this,
    &amp;#39;some&amp;#39;,
    [
        &amp;#39;needs_environment&amp;#39; =&amp;gt; true,
    ]
)


function some(Twig_Environment $env, $otherParams) {
    return &amp;quot;&amp;quot;;
}
&lt;/pre&gt;&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>php array chunk function</title>
      <link>http://wysocki.in/php-array-chunk-function</link>
      <pubDate>Wed, 10 Feb 2016 16:33:10 +0100</pubDate>
      
      <guid>http://wysocki.in/php-array-chunk-function</guid>
      <description>

&lt;h2 id=&#34;usage:425340eeb0130f5a16f8edc692d4b92c&#34;&gt;Usage&lt;/h2&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;$array&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;foreach&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(array_chunk($array)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$part)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;print_r($part);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and you&amp;rsquo;ll get output chunked by given chunk size:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Array
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
Array
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
Array
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
Array
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;7&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
Array
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;thanks &lt;a href=&#34;https://twitter.com/200PercentDev&#34;&gt;@200PercentDev&lt;/a&gt; for pointing this out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang Channels Patterns - pipes</title>
      <link>http://wysocki.in/golang-channels-pipes</link>
      <pubDate>Tue, 08 Dec 2015 06:42:47 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-channels-pipes</guid>
      <description>

&lt;p&gt;Sometimes we want to push our data through several functions (filters), when
these functions are Processor itensive it&amp;rsquo;ll be good idea to run
them as go routines.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll define our functions as ones which receive and returns channel of the
same type. (&lt;code&gt;square&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;), &lt;code&gt;gen&lt;/code&gt; function will push values to first channel.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;gen&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;nums&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;nums&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;n&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;close(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;square&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;n&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;close(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;n&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;close(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;gen&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Second generator&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;square&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;square&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;gen&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/XSxs_5nckC&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;When we run this program we&amp;rsquo;ll receive output:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;❯ go run &lt;span style=&#34;color: #ae81ff&#34;&gt;90&lt;/span&gt;-patterns-pipeline.go
&lt;span style=&#34;color: #ae81ff&#34;&gt;40&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;80&lt;/span&gt;
Second generator
&lt;span style=&#34;color: #ae81ff&#34;&gt;32&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;162&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;512&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;1250&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;code-summary:cbd7b7dd410cfee31e8fe216c849f6c5&#34;&gt;Code Summary&lt;/h3&gt;

&lt;p&gt;As we can observe, it&amp;rsquo;s really simple to push data through several
functions with use of channels. With go routines it&amp;rsquo;ll be very easy
to split your work in concurrent environment.&lt;/p&gt;

&lt;h3 id=&#34;want-more:cbd7b7dd410cfee31e8fe216c849f6c5&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zen of go - Go pro-verbs</title>
      <link>http://wysocki.in/zen-of-go</link>
      <pubDate>Mon, 07 Dec 2015 16:38:41 +0100</pubDate>
      
      <guid>http://wysocki.in/zen-of-go</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://wysocki.in/img/gopher-with-sword.png&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;simple-poetic-pithy:5f912d2dcb2d0ac5e9422d2b9a2522e3&#34;&gt;Simple, Poetic, Pithy&lt;/h2&gt;

&lt;p&gt;Python has his PEP20 - Zen Of Python which are very nice IMO. Now Go community have similar Go Proverbs
thanks to &lt;a href=&#34;https://twitter.com/rob_pike&#34;&gt;Rob Pike&lt;/a&gt;!!&lt;/p&gt;

&lt;p&gt;They are several key points in context of Go programming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;/li&gt;
&lt;li&gt;Concurrency is not parallelism.&lt;/li&gt;
&lt;li&gt;Channels orchestrate; mutexes serialize.&lt;/li&gt;
&lt;li&gt;The bigger the interface, the weaker the abstraction.&lt;/li&gt;
&lt;li&gt;Make the zero value useful.&lt;/li&gt;
&lt;li&gt;interface{} says nothing.&lt;/li&gt;
&lt;li&gt;Gofmt&amp;rsquo;s style is no one&amp;rsquo;s favorite, yet gofmt is everyone&amp;rsquo;s favorite.&lt;/li&gt;
&lt;li&gt;A little copying is better than a little dependency.&lt;/li&gt;
&lt;li&gt;Syscall must always be guarded with build tags.&lt;/li&gt;
&lt;li&gt;Cgo must always be guarded with build tags.&lt;/li&gt;
&lt;li&gt;Cgo is not Go.&lt;/li&gt;
&lt;li&gt;With the unsafe package there are no guarantees.&lt;/li&gt;
&lt;li&gt;Clear is better than clever.&lt;/li&gt;
&lt;li&gt;Reflection is never clear.&lt;/li&gt;
&lt;li&gt;Errors are values.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t just check errors, handle them gracefully.&lt;/li&gt;
&lt;li&gt;Design the architecture, name the components, document the details.&lt;/li&gt;
&lt;li&gt;Documentation is for users.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t panic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There could be more in future. Original page: &lt;a href=&#34;http://go-proverbs.github.io/&#34;&gt;http://go-proverbs.github.io/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang concurrency - data races</title>
      <link>http://wysocki.in/golang-concurrency-data-races</link>
      <pubDate>Fri, 27 Nov 2015 14:00:00 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-concurrency-data-races</guid>
      <description>

&lt;p&gt;&lt;img class=&#34;main&#34; src=&#34;&#34;&gt;&lt;/p&gt;

&lt;img class=&#34;main&#34; src=&#34;http://wysocki.in/img/golang-data-race-1.png&#34;&gt;


&lt;p&gt;Concurrent programming can be tricky, when you are not carefull enough. When you have
several concurrent threads (goroutines), and all of them reads or writes data to some
data structure, they want to do it often in the same period of time which causes that
only one write will happen, or data will be read with invalid value which was not
updated properly.&lt;/p&gt;

&lt;h2 id=&#34;preconditions:59379cce1c625dd15951f4c54912cbba&#34;&gt;Preconditions&lt;/h2&gt;

&lt;p&gt;To make sure everything will work for you You will need to run examples below
on machine with more than 1 core and with &lt;code&gt;GOMAXPROCS&lt;/code&gt; set to greater value than
1 (without that there will be no two or more concurrently working goroutines
on the same time) - Go &amp;gt; 1.5 sets &lt;code&gt;GOMAXPROCS&lt;/code&gt; to number of cores automatically.&lt;/p&gt;

&lt;h2 id=&#34;exmaple-1-data-race:59379cce1c625dd15951f4c54912cbba&#34;&gt;Exmaple 1 - data race&lt;/h2&gt;

&lt;p&gt;In below examples We&amp;rsquo;ll implement simple counter struct which will be incrementing
simple integer.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll run &lt;code&gt;100&lt;/code&gt; goroutines, each of them will increment our counter &lt;code&gt;10 000&lt;/code&gt; times
which gives us &lt;code&gt;1 000 000&lt;/code&gt;, simple enough.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;intCounter&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;intCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;intCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;int64(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;intCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;no&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;())&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/_iZzudgmc5&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;Let&amp;rsquo;s run our example (run it on your &lt;em&gt;local machine&lt;/em&gt;, play.golang.org returns good value because it has set &lt;code&gt;GOMAXPROCS&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;❯ go run counter.go
&lt;span style=&#34;color: #ae81ff&#34;&gt;248863&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What&amp;rsquo;s happen? we should have result equals to &lt;code&gt;1 000 000&lt;/code&gt;.
Whoaaaa! You have your first &lt;strong&gt;data race&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;To detect it before running your program simply run it with &lt;code&gt;-race&lt;/code&gt; flag:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;go run -race app.go
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which gives you result:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;❯ go run -race app.go &amp;gt;&amp;gt; out.txt
&lt;span style=&#34;color: #f92672&#34;&gt;==================&lt;/span&gt;
WARNING: DATA RACE
Read by goroutine &lt;span style=&#34;color: #ae81ff&#34;&gt;7&lt;/span&gt;:
  main.main.func1&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      /home/exu/src/github.com/exu/go-workshops/101-concurrency-other/app.go:24 +0x42

Previous write by goroutine &lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;:
  main.main.func1&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      /home/exu/src/github.com/exu/go-workshops/101-concurrency-other/app.go:24 +0x58

Goroutine &lt;span style=&#34;color: #ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;running&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; created at:
  main.main&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      /home/exu/src/github.com/exu/go-workshops/101-concurrency-other/app.go:26 +0x92

Goroutine &lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;running&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; created at:
  main.main&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      /home/exu/src/github.com/exu/go-workshops/101-concurrency-other/app.go:26 +0x92
&lt;span style=&#34;color: #f92672&#34;&gt;==================&lt;/span&gt;
Found &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; data race&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt; status &lt;span style=&#34;color: #ae81ff&#34;&gt;66&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yeah! Go can detect your data races automatically, run it when you dealing with go routines. These errors can be really tricky on production, I thinks it could be good idea to attach such tests to your building pipeline.&lt;/p&gt;

&lt;p&gt;Ok, We have data race, what&amp;rsquo;s next? We&amp;rsquo;ll correct it. There is several techniques in Go
to do it, rule is very simple - synchronize your data!&lt;/p&gt;

&lt;h2 id=&#34;example-2-atomic-counters:59379cce1c625dd15951f4c54912cbba&#34;&gt;Example 2 - Atomic counters&lt;/h2&gt;

&lt;p&gt;First We&amp;rsquo;ll try to correct Our counter with atomic counters, it&amp;rsquo;s included in go core &lt;code&gt;sync/atomic&lt;/code&gt; standard library.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;runtime&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;sync/atomic&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;atomicCounter&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;atomicCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;atomic&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;AddInt64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Gosched&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;atomicCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;atomic&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;LoadInt64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;atomicCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{}&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;no&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;())&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/6Qrd3j-zvs&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;In order to ensure that this goroutine doesn’t starve the scheduler, we
explicitly yield after each operation with &lt;code&gt;runtime.Gosched()&lt;/code&gt;. This
yielding is handled automatically with e.g. every &lt;code&gt;channel&lt;/code&gt; operation and
for blocking calls like &lt;code&gt;time.Sleep&lt;/code&gt;, but in this case we need to do it
manually.&lt;/p&gt;

&lt;p&gt;Now our counter is thread-safe. You can check if data races still exists:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ go run -race atomic.go
&lt;span style=&#34;color: #ae81ff&#34;&gt;1000000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Whoa!! no data races!!&lt;/p&gt;

&lt;h2 id=&#34;example-3-mutexes:59379cce1c625dd15951f4c54912cbba&#34;&gt;Example 3 - Mutexes&lt;/h2&gt;

&lt;p&gt;Now We&amp;rsquo;ll try to correct Our counter with mutexes, it&amp;rsquo;s included in go core &lt;code&gt;sync&lt;/code&gt; standard library. Using atomic counters and need to run &lt;code&gt;runtime.Gosched&lt;/code&gt; doesn&amp;rsquo;t look nice. For
Me &lt;code&gt;mutex&lt;/code&gt; looks and feels a lot better.&lt;/p&gt;

&lt;p&gt;Take a look at code written below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;mutexCounter&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;mu&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Mutex&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt;  &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;mutexCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;mu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Lock&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;mu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Unlock&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;mutexCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;mu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Lock&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;mu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Unlock&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;mutexCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{}&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;no&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;())&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/zzGE5yByPo&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;Again try to check if data race exists:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ go run -race mutex.go
&lt;span style=&#34;color: #ae81ff&#34;&gt;1000000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Yeah! No data races again!&lt;/p&gt;

&lt;h2 id=&#34;conclusion:59379cce1c625dd15951f4c54912cbba&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When doing concurrent programming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your program don&amp;rsquo;t work sequentially&lt;/li&gt;
&lt;li&gt;Be really careful when doing data synchronization between goroutines&lt;/li&gt;
&lt;li&gt;Use channels, mutexes, atomic counters&lt;/li&gt;
&lt;li&gt;Use included tools in your language, &lt;code&gt;-race&lt;/code&gt; is your friend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good exercise can be to try to implement previous counter solutions using &lt;code&gt;channels&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;want-more:59379cce1c625dd15951f4c54912cbba&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang channels - Reading one channels with multiple goroutines</title>
      <link>http://wysocki.in/golang-channels-reading-one-channel-with-multiple-goroutines</link>
      <pubDate>Fri, 27 Nov 2015 10:49:43 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-channels-reading-one-channel-with-multiple-goroutines</guid>
      <description>

&lt;p&gt;Reading from ticker by multiple goroutines is quite simple. We need iterate
through it values using &lt;code&gt;range&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;ticker&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;NewTicker&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Millisecond&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ticker&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ene&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ticker&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Due&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ticker&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Fake&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;ticker&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Stop&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ticker stopped&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/LQ9eQBOBMs&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;h3 id=&#34;code-summary:59e47daa5e33fcd13297e048bea8411e&#34;&gt;Code Summary&lt;/h3&gt;

&lt;p&gt;There are several important things in this example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;until we sleep we&amp;rsquo;ve had 3 goroutines, each of them try to read
from our ticker channel, but only one in given period of time
can do this,&lt;/li&gt;
&lt;li&gt;it looks like there is something like queue (this should be confirmed! it&amp;rsquo;s only observation)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;want-more:59e47daa5e33fcd13297e048bea8411e&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang channels - buffered semaphor</title>
      <link>http://wysocki.in/golang-channels-buffered-semaphor</link>
      <pubDate>Thu, 26 Nov 2015 15:49:43 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-channels-buffered-semaphor</guid>
      <description>

&lt;p&gt;We try to run 20 concurrent goroutines (all of them will start), in example below
We&amp;rsquo;re setting channel buffer value to &lt;code&gt;5&lt;/code&gt;, go blocks on write where there is no
more room in our channel buffer (we currently have &lt;code&gt;5&lt;/code&gt;) when first &lt;code&gt;5&lt;/code&gt; goroutines run
buffer will be full and next &lt;code&gt;15&lt;/code&gt; will wait on write. After first goroutine complete and
read from channel next hunged goroutine write data to goroutine.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;sem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;println(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;starting&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;sem&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Step&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Now&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;())&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sem&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/zpUiSJoPv3&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;h3 id=&#34;code-summary:374d01683790e6e902acefd695c3a4ba&#34;&gt;Code Summary&lt;/h3&gt;

&lt;p&gt;In context of writing to channels there are some important things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing to channels blocks&lt;/li&gt;
&lt;li&gt;If buffer is set (second param in &lt;code&gt;make&lt;/code&gt; function) writing is blocked after buffer is full
until that all goroutines can write to this channel.&lt;/li&gt;
&lt;li&gt;In our example all goroutines have started (5 are working, 15 are blocked on write)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Play around change buffer value to other, look how it will work with your changes.&lt;/p&gt;

&lt;h3 id=&#34;want-more:374d01683790e6e902acefd695c3a4ba&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang channels - quit channel</title>
      <link>http://wysocki.in/golang-channels-quit-channel</link>
      <pubDate>Thu, 26 Nov 2015 15:49:43 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-channels-quit-channel</guid>
      <description>

&lt;p&gt;Sometimes you may want to break your program running inside goroutine from
other goroutine or simply from main function. Below You can see My simple
implementation of go quit channel.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;quit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;quit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
				&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
				&lt;span style=&#34;color: #f8f8f2&#34;&gt;println(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
				&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Millisecond&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

	&lt;span style=&#34;color: #75715e&#34;&gt;// Do stuff&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #75715e&#34;&gt;// Quit goroutine&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;quit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/LCtaucaU65&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;h3 id=&#34;code-summary:56f482da4276e03cb54534c3a9fb674f&#34;&gt;Code Summary&lt;/h3&gt;

&lt;p&gt;In context of communicating from external goroutines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;select&lt;/code&gt; to read from multiple channels (in our example We only want
to break infinite loop)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt; is always run when there is no value from channel&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;want-more:56f482da4276e03cb54534c3a9fb674f&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang channels - rate limiting</title>
      <link>http://wysocki.in/golang-channels-rate-limiting</link>
      <pubDate>Thu, 26 Nov 2015 15:49:43 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-channels-rate-limiting</guid>
      <description>

&lt;p&gt;When you need to limit rate of operations done by your program (e.g. low resources
on node) go gives you very nice tool fo that. We&amp;rsquo;ll use &lt;code&gt;ticker&lt;/code&gt; which creates
a &lt;code&gt;time.Time&lt;/code&gt; channel and sends to it value with configured interval.&lt;/p&gt;

&lt;p&gt;First we add &lt;code&gt;50&lt;/code&gt; values to our requests channel. We know that there will not be
new data, so we can close channel. Next we define ticker and iterate through
our &lt;code&gt;requests&lt;/code&gt; channel.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;requests&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;requests&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;close(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;limiter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Tick&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Millisecond&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;requests&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;limiter&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Now&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;())&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/wHYHe_DA7s&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;h3 id=&#34;code-summary:2899a68356cc78ff99fd1c3cf580a0ab&#34;&gt;Code Summary&lt;/h3&gt;

&lt;p&gt;Why we simply don&amp;rsquo;t use &lt;code&gt;time.Sleep()&lt;/code&gt;? Ticker is better for that
because it can be canceled what gives us control over it.&lt;/p&gt;

&lt;h3 id=&#34;want-more:2899a68356cc78ff99fd1c3cf580a0ab&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang Channels - Basics</title>
      <link>http://wysocki.in/golang-channels-basics</link>
      <pubDate>Wed, 25 Nov 2015 16:56:07 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-channels-basics</guid>
      <description>

&lt;p&gt;Channels was made for synchronizing data between concurrently working goroutines (golang
light threads). By default operations on channel (reading and writing) are blocking.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look for simple example below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

    &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;doIt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Print&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;working...&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// send value to channel&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// We&amp;#39;re creating channel and&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// starting doIt function as gorouine&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;doIt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;done&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// reading from channel with `&amp;lt;-` blocks program until&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// we receive value after one second in `doIt` function&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;done&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/gh5ihivC4L&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;h3 id=&#34;code-summary:b7f1cb643094ee3dbf988083964d7342&#34;&gt;Code Summary&lt;/h3&gt;

&lt;p&gt;This simple example contains several important points about channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go block on reading from channel&lt;/li&gt;
&lt;li&gt;There is no control of running goroutines, try to remove reading from channel (&lt;code&gt;a := &amp;lt;-done&lt;/code&gt;) You&amp;rsquo;ll see that your program will not complete &lt;code&gt;doIt&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;re passing channels to functions as something similar to reference (channels are
used on both sides - goroutine which write to channel, and goroutine which reads from it - main function in this example)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;want-more:b7f1cb643094ee3dbf988083964d7342&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang Channels - Receiving data</title>
      <link>http://wysocki.in/golang-channels-receiving-data-from-multiple-channels</link>
      <pubDate>Wed, 25 Nov 2015 16:56:07 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-channels-receiving-data-from-multiple-channels</guid>
      <description>

&lt;p&gt;When we want to receive data from multiple channels (probably filled by
multiple goroutines) we should use &lt;code&gt;select&lt;/code&gt; statement. It simply choose
channel which receive value as first (It&amp;rsquo;s in context of time)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;c1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;c2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;msg1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;received&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;msg1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;msg2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;received&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;msg2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/wnusjAPW1g&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;h3 id=&#34;code-summary:efe161ef779bd2b7a6dadc547c487606&#34;&gt;Code Summary&lt;/h3&gt;

&lt;p&gt;This simple example contains several important points about receiving data from
multiple channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select blocks until value will be sent through channel (whatever channel in case statement).&lt;/li&gt;
&lt;li&gt;In example above we read data from first channel which receive value (&lt;code&gt;msg2&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If we want receive from all channels, we should loop through select statement
as many times as many values we want to read.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;want-more:efe161ef779bd2b7a6dadc547c487606&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://wysocki.in/contact/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/contact/</guid>
      <description>

&lt;h2 id=&#34;by-email:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;by Email&lt;/h2&gt;

&lt;script&gt;
var a = (&#39;jacek.wysocki&#39; + &#39;+blog@&#39; + &#39;gmail.com&#39;)
document.write(&#39;&lt;li&gt;mailto: &lt;a href=&#34;mailto:&#39; + a + &#39;&#34;&gt;&#39; + a + &#39;&lt;/a&gt;&lt;/li&gt;&#39;)
&lt;/script&gt;

&lt;p&gt;&lt;NOSCRIPT&gt;
    &lt;em&gt;Email address protected by JavaScript.&lt;BR&gt;
    Please enable JavaScript to contact me.&lt;/em&gt;
&lt;/NOSCRIPT&gt;&lt;/p&gt;

&lt;h2 id=&#34;social-media:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Social media&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://twitter.com/ex00&#34;&gt;ex00@twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/exu&#34;&gt;exu@github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Golang SQL handling with sqlx package</title>
      <link>http://wysocki.in/database/2015/01/golang-sqlx/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/database/2015/01/golang-sqlx/</guid>
      <description>&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;&lt;code&gt;Sqlx&lt;/code&gt; little helper for your database problems&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
SQLX package will help you in several everyday jobs with
your SQL database. All examples below are &#34;copy-pastable&#34;
so you can write them to file and run by &lt;code&gt;go run filename.go&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-1&#34;&gt;Get dependencies&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-1&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;go get github.com/jmoiron/sqlx
go get github.com/go-sql-driver/mysql
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-2&#34;&gt;Init database&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-2&#34;&gt;
&lt;p&gt;
I&#39;m using MySQL/MariaDB in this example:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sql&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;CREATE&lt;/span&gt; DATABASE `sqlx_test`;
USE `sqlx_test`;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;TABLE&lt;/span&gt; `items` (
  `id` &lt;span style=&#34;color: #9dd7ff;&#34;&gt;int&lt;/span&gt;(11) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,
  `&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;` &lt;span style=&#34;color: #9dd7ff;&#34;&gt;varchar&lt;/span&gt;(255) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NULL&lt;/span&gt;,
  `description` longtext &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NULL&lt;/span&gt;,
  &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;KEY&lt;/span&gt; (`id`)
);
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INTO&lt;/span&gt; `items` (&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;, description) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;mechanical keyboard&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;good for writing code&#39;&lt;/span&gt;);
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INTO&lt;/span&gt; `items` (&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;, description) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;coffe&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;oh yummy!&#39;&lt;/span&gt;);
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INTO&lt;/span&gt; `items` (&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;, description) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;emacs&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;your favourite text editor&#39;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id=&#34;outline-container-sec-1-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-3&#34;&gt;SQLX provides several helpers&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-3&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-sec-1-3-1&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-1&#34;&gt;Mapping single result to struct with &lt;code&gt;Get&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-1&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;
&lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;I&#39;m using MySQL&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id            int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Name          sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Description   sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;Must.... functions will panic on fail&lt;/span&gt;
    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:PASSWORD@tcp(l:3306)/sqlx_test&#34;&lt;/span&gt;)
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;We&#39;ll get most recent item and map it into our struct&lt;/span&gt;
    err := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Get&lt;/span&gt;(&amp;amp;item, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;SELECT * FROM items ORDER BY id DESC LIMIT 1&#34;&lt;/span&gt;)
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }

    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;id: %d, %s, %s&#34;&lt;/span&gt;, item.Id, item.Name.String, item.Description.String)
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
write above content into file (&lt;code&gt;get.go&lt;/code&gt;) and run &lt;code&gt;go run get.go&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run get.go

id: 3, emacs, your favourite text editor
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div id=&#34;outline-container-sec-1-3-2&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-2&#34;&gt;Preparing statements with &lt;code&gt;Preparex&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-2&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id          int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Name        sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Description sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item

    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:root@tcp(127.0.0.1:3306)/sqlx_test&#34;&lt;/span&gt;)
    stmt, err := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Preparex&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;`SELECT * FROM items WHERE id=?`&lt;/span&gt;)

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;existing one&lt;/span&gt;
    err = stmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Get&lt;/span&gt;(&amp;amp;item, 1)
    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(item)

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;not existing one&lt;/span&gt;
    err = stmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Get&lt;/span&gt;(&amp;amp;item, 3)
    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(item)

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;handling non existing item&lt;/span&gt;
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err == sql.ErrNoRows {
        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;There is no row with id&#34;&lt;/span&gt;, 900)
    } &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Save above content into &lt;code&gt;prepare_x.go&lt;/code&gt; and run &lt;code&gt;go run prepare_x.go&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run prepare_x.go

{1 {mechanical keyboard true} {good for writing code true}}
{3 {emacs true} {your favourite text editor true}}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-1-3-3&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-3&#34;&gt;Querying row with &lt;code&gt;QueryRowx&lt;/code&gt; and &lt;code&gt;StructScan&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-3&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id          int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Name        sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Description sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item

    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:root@tcp(127.0.0.1:3306)/sqlx_test&#34;&lt;/span&gt;)

    row := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;QueryRowx&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;SELECT * FROM items WHERE id=?&#34;&lt;/span&gt;, 3)
    err := row.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;StructScan&lt;/span&gt;(&amp;amp;item)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }

    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(item)
}
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
and output after run:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run query_row_x.go

{3 {emacs true} {your favourite text editor true}}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1-3-4&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-4&#34;&gt;Querying multiple rows with &lt;code&gt;Queryx&lt;/code&gt; and &lt;code&gt;StructScan&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-4&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;

&lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;We&#39;re using MySQL&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;We can map columns to fields&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id  int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Nme sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Dsc sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {

    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:root@tcp(127.0.0.1:3306)/sqlx_test&#34;&lt;/span&gt;)
    rows, err := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Queryx&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;SELECT id, name, description FROM items&#34;&lt;/span&gt;)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;for&lt;/span&gt; rows.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Next&lt;/span&gt;() {
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item
        err = rows.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;StructScan&lt;/span&gt;(&amp;amp;item)

        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
            &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
        }

        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(
            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;%d - %s:  %s\n===================\n&#34;&lt;/span&gt;,
            item.Id,
            item.Nme.String,
            item.Dsc.String,
        )
    }
}
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
output:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run query_x.go

1 - mechanical keyboard:  good for writing code
===================
2 - coffe:  oh yummy!
===================
3 - emacs:  your favourite text editor
===================
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id=&#34;outline-container-sec-1-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-4&#34;&gt;If you want to check other things feel free to&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-4&#34;&gt;
&lt;p&gt;
&lt;code&gt;godoc -goroot=$GO github.com/jmoiron/sqlx&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Golang SQL handling with sqlx package</title>
      <link>http://wysocki.in/golang-sqlx</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/golang-sqlx</guid>
      <description>&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;&lt;code&gt;Sqlx&lt;/code&gt; little helper for your database problems&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
SQLX package will help you in several everyday jobs with
your SQL database. All examples below are &#34;copy-pastable&#34;
so you can write them to file and run by &lt;code&gt;go run filename.go&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-1&#34;&gt;Get dependencies&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-1&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;go get github.com/jmoiron/sqlx
go get github.com/go-sql-driver/mysql
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-2&#34;&gt;Init database&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-2&#34;&gt;
&lt;p&gt;
I&#39;m using MySQL/MariaDB in this example:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sql&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;CREATE&lt;/span&gt; DATABASE `sqlx_test`;
USE `sqlx_test`;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;TABLE&lt;/span&gt; `items` (
  `id` &lt;span style=&#34;color: #9dd7ff;&#34;&gt;int&lt;/span&gt;(11) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,
  `&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;` &lt;span style=&#34;color: #9dd7ff;&#34;&gt;varchar&lt;/span&gt;(255) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NULL&lt;/span&gt;,
  `description` longtext &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NULL&lt;/span&gt;,
  &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;KEY&lt;/span&gt; (`id`)
);
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INTO&lt;/span&gt; `items` (&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;, description) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;mechanical keyboard&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;good for writing code&#39;&lt;/span&gt;);
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INTO&lt;/span&gt; `items` (&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;, description) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;coffe&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;oh yummy!&#39;&lt;/span&gt;);
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INTO&lt;/span&gt; `items` (&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;, description) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;emacs&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;your favourite text editor&#39;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id=&#34;outline-container-sec-1-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-3&#34;&gt;SQLX provides several helpers&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-3&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-sec-1-3-1&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-1&#34;&gt;Mapping single result to struct with &lt;code&gt;Get&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-1&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;
&lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;I&#39;m using MySQL&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id            int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Name          sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Description   sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;Must.... functions will panic on fail&lt;/span&gt;
    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:PASSWORD@tcp(l:3306)/sqlx_test&#34;&lt;/span&gt;)
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;We&#39;ll get most recent item and map it into our struct&lt;/span&gt;
    err := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Get&lt;/span&gt;(&amp;amp;item, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;SELECT * FROM items ORDER BY id DESC LIMIT 1&#34;&lt;/span&gt;)
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }

    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;id: %d, %s, %s&#34;&lt;/span&gt;, item.Id, item.Name.String, item.Description.String)
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
write above content into file (&lt;code&gt;get.go&lt;/code&gt;) and run &lt;code&gt;go run get.go&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run get.go

id: 3, emacs, your favourite text editor
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div id=&#34;outline-container-sec-1-3-2&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-2&#34;&gt;Preparing statements with &lt;code&gt;Preparex&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-2&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id          int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Name        sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Description sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item

    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:root@tcp(127.0.0.1:3306)/sqlx_test&#34;&lt;/span&gt;)
    stmt, err := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Preparex&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;`SELECT * FROM items WHERE id=?`&lt;/span&gt;)

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;existing one&lt;/span&gt;
    err = stmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Get&lt;/span&gt;(&amp;amp;item, 1)
    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(item)

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;not existing one&lt;/span&gt;
    err = stmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Get&lt;/span&gt;(&amp;amp;item, 3)
    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(item)

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;handling non existing item&lt;/span&gt;
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err == sql.ErrNoRows {
        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;There is no row with id&#34;&lt;/span&gt;, 900)
    } &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Save above content into &lt;code&gt;prepare_x.go&lt;/code&gt; and run &lt;code&gt;go run prepare_x.go&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run prepare_x.go

{1 {mechanical keyboard true} {good for writing code true}}
{3 {emacs true} {your favourite text editor true}}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-1-3-3&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-3&#34;&gt;Querying row with &lt;code&gt;QueryRowx&lt;/code&gt; and &lt;code&gt;StructScan&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-3&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id          int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Name        sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Description sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item

    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:root@tcp(127.0.0.1:3306)/sqlx_test&#34;&lt;/span&gt;)

    row := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;QueryRowx&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;SELECT * FROM items WHERE id=?&#34;&lt;/span&gt;, 3)
    err := row.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;StructScan&lt;/span&gt;(&amp;amp;item)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }

    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(item)
}
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
and output after run:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run query_row_x.go

{3 {emacs true} {your favourite text editor true}}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1-3-4&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-4&#34;&gt;Querying multiple rows with &lt;code&gt;Queryx&lt;/code&gt; and &lt;code&gt;StructScan&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-4&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;

&lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;We&#39;re using MySQL&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;We can map columns to fields&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id  int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Nme sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Dsc sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {

    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:root@tcp(127.0.0.1:3306)/sqlx_test&#34;&lt;/span&gt;)
    rows, err := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Queryx&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;SELECT id, name, description FROM items&#34;&lt;/span&gt;)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;for&lt;/span&gt; rows.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Next&lt;/span&gt;() {
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item
        err = rows.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;StructScan&lt;/span&gt;(&amp;amp;item)

        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
            &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
        }

        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(
            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;%d - %s:  %s\n===================\n&#34;&lt;/span&gt;,
            item.Id,
            item.Nme.String,
            item.Dsc.String,
        )
    }
}
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
output:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run query_x.go

1 - mechanical keyboard:  good for writing code
===================
2 - coffe:  oh yummy!
===================
3 - emacs:  your favourite text editor
===================
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id=&#34;outline-container-sec-1-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-4&#34;&gt;If you want to check other things feel free to&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-4&#34;&gt;
&lt;p&gt;
&lt;code&gt;godoc -goroot=$GO github.com/jmoiron/sqlx&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Golang JSON RPC Services using net/rpc/jsonrpc</title>
      <link>http://wysocki.in/golang/2015/01/golang-net-rpc-jsonrpc/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/golang/2015/01/golang-net-rpc-jsonrpc/</guid>
      <description>&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;RPC or not to RPC&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
Yesterday I&#39;ve played with JSON RPC Server and decided that I&#39;ll write something
about it because didn&#39;t found much resources about writing this kind of services in Golang.
&lt;/p&gt;

&lt;p&gt;
As reference I&#39;ve used post from Michael Crosby  &lt;a href=&#34;http://crosbymichael.com/golang-json-rpc.html&#34;&gt;http://crosbymichael.com/golang-json-rpc.html&lt;/a&gt;
and I&#39;ve tuned it a little to work out of the box on recent Go (1.4).
&lt;/p&gt;


&lt;p&gt;
It&#39;s one file example so server is runned in go-routine (will close after
 execution of last line).
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;Arith&lt;/code&gt; code was borrowed from &lt;code&gt;all_test.go&lt;/code&gt; (in net/rpc/jsonrpc lib directory)
file for better post readability
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-1-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-1&#34;&gt;Working example (&lt;a href=&#34;https://github.com/exu/go-playground&#34;&gt;and many others&lt;/a&gt;)  can be found on my github account:&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-1&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/exu/go-playground/blob/master/47-json-rpc/rpc.go&#34;&gt;https://github.com/exu/go-playground/blob/master/47-json-rpc/rpc.go&lt;/a&gt;.
&lt;/p&gt;



&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; (
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;errors&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;log&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;net&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;net/rpc&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;net/rpc/jsonrpc&#34;&lt;/span&gt;
)

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Args&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    A, B int
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Reply&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    C int
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;int&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;ArithAddResp&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id     &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;interface&lt;/span&gt;{} &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`json:&#34;id&#34;`&lt;/span&gt;
    Result Reply       &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`json:&#34;result&#34;`&lt;/span&gt;
    Error  &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;interface&lt;/span&gt;{} &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`json:&#34;error&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; (t *&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;) &lt;span style=&#34;color: #a2d7fb;&#34;&gt;Add&lt;/span&gt;(args *Args, reply *Reply) error {
    reply.C = args.A + args.B
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; (t *&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;) &lt;span style=&#34;color: #a2d7fb;&#34;&gt;Mul&lt;/span&gt;(args *Args, reply *Reply) error {
    reply.C = args.A * args.B
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; (t *&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;) &lt;span style=&#34;color: #a2d7fb;&#34;&gt;Div&lt;/span&gt;(args *Args, reply *Reply) error {
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; args.B == 0 {
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;return&lt;/span&gt; errors.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;divide by zero&#34;&lt;/span&gt;)
    }
    reply.C = args.A / args.B
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; (t *&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;) &lt;span style=&#34;color: #a2d7fb;&#34;&gt;Error&lt;/span&gt;(args *Args, reply *Reply) error {
    &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;ERROR&#34;&lt;/span&gt;)
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;startServer&lt;/span&gt;() {
    arith := &lt;span style=&#34;color: #93e0e3;&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;)

    server := rpc.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;NewServer&lt;/span&gt;()
    server.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Register&lt;/span&gt;(arith)

    l, e := net.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Listen&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;tcp&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;:8222&#34;&lt;/span&gt;)
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; e != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        log.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;listen error:&#34;&lt;/span&gt;, e)
    }

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;for&lt;/span&gt; {
        conn, err := l.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Accept&lt;/span&gt;()
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
            log.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Fatal&lt;/span&gt;(err)
        }

        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;go&lt;/span&gt; server.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;ServeCodec&lt;/span&gt;(jsonrpc.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;NewServerCodec&lt;/span&gt;(conn))
    }
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;starting server in go routine (it ends on end&lt;/span&gt;
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;of main function&lt;/span&gt;
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;startServer&lt;/span&gt;()

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;now client part connecting to RPC service&lt;/span&gt;
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;and calling methods&lt;/span&gt;

    conn, err := net.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Dial&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;tcp&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;localhost:8222&#34;&lt;/span&gt;)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;defer&lt;/span&gt; conn.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Close&lt;/span&gt;()

    c := jsonrpc.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;NewClient&lt;/span&gt;(conn)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; reply Reply
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; args *Args
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;for&lt;/span&gt; i := 0; i &amp;lt; 11; i++ {
        &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;passing Args to RPC call&lt;/span&gt;
        args = &amp;amp;&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Args&lt;/span&gt;{7, i}

        &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;calling &#34;Arith.Mul&#34; on RPC server&lt;/span&gt;
        err = c.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Call&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;Arith.Mul&#34;&lt;/span&gt;, args, &amp;amp;reply)
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
            log.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;arith error:&#34;&lt;/span&gt;, err)
        }
        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;Arith: %d * %d = %v\n&#34;&lt;/span&gt;, args.A, args.B, reply.C)

        &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;calling &#34;Arith.Add&#34; on RPC server&lt;/span&gt;
        err = c.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Call&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;Arith.Add&#34;&lt;/span&gt;, args, &amp;amp;reply)
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
            log.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;arith error:&#34;&lt;/span&gt;, err)
        }
        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;Arith: %d + %d = %v\n&#34;&lt;/span&gt;, args.A, args.B, reply.C)

        &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;NL&lt;/span&gt;
        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;\033[33m%s\033[m\n&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;---------------&#34;&lt;/span&gt;)

    }
}
&lt;/pre&gt;
&lt;/div&gt;



&lt;p&gt;
When we run above program, we should receive:
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run rpc.go


Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;0&lt;/span&gt; = 0
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;0&lt;/span&gt; = 7
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;1&lt;/span&gt; = 7
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;1&lt;/span&gt; = 8
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;2&lt;/span&gt; = 14
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;2&lt;/span&gt; = 9
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;3&lt;/span&gt; = 21
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;3&lt;/span&gt; = 10
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;4&lt;/span&gt; = 28
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;4&lt;/span&gt; = 11
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;5&lt;/span&gt; = 35
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;5&lt;/span&gt; = 12
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;6&lt;/span&gt; = 42
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;6&lt;/span&gt; = 13
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;7&lt;/span&gt; = 49
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;7&lt;/span&gt; = 14
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;8&lt;/span&gt; = 56
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;8&lt;/span&gt; = 15
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;9&lt;/span&gt; = 63
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;9&lt;/span&gt; = 16
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;10&lt;/span&gt; = 70
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;10&lt;/span&gt; = 17
---------------
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>