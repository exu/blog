<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jacek Wysocki DevLog</title>
    <link>http://wysocki.in/</link>
    <description>Recent content on Jacek Wysocki DevLog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Nov 2015 14:00:00 +0100</lastBuildDate>
    <atom:link href="http://wysocki.in/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang concurrency - data races</title>
      <link>http://wysocki.in/golang-concurrency-data-races</link>
      <pubDate>Fri, 27 Nov 2015 14:00:00 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-concurrency-data-races</guid>
      <description>

&lt;p&gt;&lt;img class=&#34;main&#34; src=&#34;&#34;&gt;&lt;/p&gt;

&lt;img class=&#34;main&#34; src=&#34;http://wysocki.in/img/golang-data-race-1.png&#34;&gt;


&lt;p&gt;Concurrent programming can be tricky, when you are not carefull enough. When you have
several concurrent threads (goroutines), and all of them reads or writes data to some
data structure, they want to do it often in the same period of time which causes that
only one write will happen, or data will be read with invalid value which was not
updated properly.&lt;/p&gt;

&lt;h2 id=&#34;preconditions:59379cce1c625dd15951f4c54912cbba&#34;&gt;Preconditions&lt;/h2&gt;

&lt;p&gt;To make sure everything will work for you You will need to run examples below
on machine with more than 1 core and with GOMAXPROCS set to greater value than
1 (without that there will be no two or more concurrently working goroutines
on the same time) - Go &amp;gt; 1.5 sets GOMAXPROCS to number of cores automatically.&lt;/p&gt;

&lt;h2 id=&#34;exmaple-1-data-race:59379cce1c625dd15951f4c54912cbba&#34;&gt;Exmaple 1 - data race&lt;/h2&gt;

&lt;p&gt;In below examples We&amp;rsquo;ll implement simple counter struct which will be incrementing
simple integer.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll run &lt;code&gt;100&lt;/code&gt; goroutines, each of them will increment our counter &lt;code&gt;10 000&lt;/code&gt; times
which gives us &lt;code&gt;1 000 000&lt;/code&gt;, simple enough.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;intCounter&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;intCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;intCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;int64(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;intCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;no&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;())&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/_iZzudgmc5&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;Let&amp;rsquo;s run our example (run it on your &lt;em&gt;local machine&lt;/em&gt;, it looks play.golang.org returns good value):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;‚ùØ go run counter.go
248863
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What&amp;rsquo;s happen? we should have result equals to &lt;code&gt;1 000 000&lt;/code&gt;.
Whoaaaa! You have your first &lt;strong&gt;data race&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;To detect it before running your program simply run it with &lt;code&gt;-race&lt;/code&gt; flag:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;go run -race app.go
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which gives you result:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;‚ùØ go run -race app.go &amp;gt;&amp;gt; out.txt
&lt;span style=&#34;color: #f92672&#34;&gt;==================&lt;/span&gt;
WARNING: DATA RACE
Read by goroutine 7:
  main.main.func1&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      /home/exu/src/github.com/exu/go-workshops/101-concurrency-other/app.go:24 +0x42

Previous write by goroutine 6:
  main.main.func1&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      /home/exu/src/github.com/exu/go-workshops/101-concurrency-other/app.go:24 +0x58

Goroutine &lt;span style=&#34;color: #ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;running&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; created at:
  main.main&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      /home/exu/src/github.com/exu/go-workshops/101-concurrency-other/app.go:26 +0x92

Goroutine &lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;running&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; created at:
  main.main&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
      /home/exu/src/github.com/exu/go-workshops/101-concurrency-other/app.go:26 +0x92
&lt;span style=&#34;color: #f92672&#34;&gt;==================&lt;/span&gt;
Found &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; data race&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit &lt;/span&gt;status 66
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yeah! Go can detect your data races automatically, run it when you dealing with go routines. These errors can be really tricky on production, I thinks it could be good idea to attach such tests to your building pipeline.&lt;/p&gt;

&lt;p&gt;Ok, We have data race, what&amp;rsquo;s next? We&amp;rsquo;ll correct it. There is several techniques in Go
to do it, rule is very simple - synchronize your data!&lt;/p&gt;

&lt;h2 id=&#34;example-2-atomic-counters:59379cce1c625dd15951f4c54912cbba&#34;&gt;Example 2 - Atomic counters&lt;/h2&gt;

&lt;p&gt;First We&amp;rsquo;ll try to correct Our counter with atomic counters, it&amp;rsquo;s included in go core &lt;code&gt;sync/atomic&lt;/code&gt; standard library.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;runtime&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;sync/atomic&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;atomicCounter&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;atomicCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;atomic&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;AddInt64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Gosched&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;atomicCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;atomic&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;LoadInt64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;atomicCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{}&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;no&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;())&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/6Qrd3j-zvs&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;In order to ensure that this goroutine doesn‚Äôt starve the scheduler, we
explicitly yield after each operation with &lt;code&gt;runtime.Gosched()&lt;/code&gt;. This
yielding is handled automatically with e.g. every &lt;code&gt;channel&lt;/code&gt; operation and
for blocking calls like &lt;code&gt;time.Sleep&lt;/code&gt;, but in this case we need to do it
manually.&lt;/p&gt;

&lt;p&gt;Now our counter is thread-safe. You can check if data races still exists:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ &lt;/span&gt;go run -race atomic.go
1000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Whoa!! no data races!!&lt;/p&gt;

&lt;h2 id=&#34;example-3-mutexes:59379cce1c625dd15951f4c54912cbba&#34;&gt;Example 3 - Mutexes&lt;/h2&gt;

&lt;p&gt;Now We&amp;rsquo;ll try to correct Our counter with mutexes, it&amp;rsquo;s included in go core &lt;code&gt;sync&lt;/code&gt; standard library. Using atomic counters and need to run &lt;code&gt;runtime.Gosched&lt;/code&gt; doesn&amp;rsquo;t look nice. For
Me &lt;code&gt;mutex&lt;/code&gt; looks and feels a lot better.&lt;/p&gt;

&lt;p&gt;Take a look at code written below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;mutexCounter&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;mu&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Mutex&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt;  &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;mutexCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;mu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Lock&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;mu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Unlock&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;mutexCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;mu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Lock&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;mu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Unlock&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;mutexCounter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{}&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;no&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;counter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;())&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/zzGE5yByPo&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;Again try to check if data race exists:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ &lt;/span&gt;go run -race mutex.go
1000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Yeah! No data races again!&lt;/p&gt;

&lt;h2 id=&#34;conclusion:59379cce1c625dd15951f4c54912cbba&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When doing concurrent programming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your program don&amp;rsquo;t work sequentially&lt;/li&gt;
&lt;li&gt;Be really careful when doing data synchronization between goroutines&lt;/li&gt;
&lt;li&gt;Use channels, mutexes, atomic counters&lt;/li&gt;
&lt;li&gt;Use included tools in your language, &lt;code&gt;-race&lt;/code&gt; is your friend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good exercise can be to try to implement previous counter solutions using &lt;code&gt;channels&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;want-more:59379cce1c625dd15951f4c54912cbba&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang channels - Reading one channels with multiple goroutines</title>
      <link>http://wysocki.in/golang-channels-reading-one-channel-with-multiple-goroutines</link>
      <pubDate>Fri, 27 Nov 2015 10:49:43 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-channels-reading-one-channel-with-multiple-goroutines</guid>
      <description>

&lt;p&gt;Reading from ticker by multiple goroutines is quite simple. We need iterate
through it values using &lt;code&gt;range&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;ticker&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;NewTicker&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Millisecond&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ticker&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ene&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ticker&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Due&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ticker&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Fake&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;ticker&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Stop&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ticker stopped&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/LQ9eQBOBMs&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;h3 id=&#34;code-summary:59e47daa5e33fcd13297e048bea8411e&#34;&gt;Code Summary&lt;/h3&gt;

&lt;p&gt;There are several important things in this example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;until we sleep we&amp;rsquo;ve had 3 goroutines, each of them try to read
from our ticker channel, but only one in given period of time
can do this,&lt;/li&gt;
&lt;li&gt;it looks like there is something like queue (this should be confirmed! it&amp;rsquo;s only observation)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;want-more:59e47daa5e33fcd13297e048bea8411e&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang channels - buffered semaphor</title>
      <link>http://wysocki.in/golang-channels-buffered-semaphor</link>
      <pubDate>Thu, 26 Nov 2015 15:49:43 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-channels-buffered-semaphor</guid>
      <description>

&lt;p&gt;We try to run 20 concurrent goroutines (all of them will start), in example below
We&amp;rsquo;re setting channel buffer value to &lt;code&gt;5&lt;/code&gt;, go blocks on write where there is no
more room in our channel buffer (we currently have &lt;code&gt;5&lt;/code&gt;) when first &lt;code&gt;5&lt;/code&gt; goroutines run
buffer will be full and next &lt;code&gt;15&lt;/code&gt; will wait on write. After first goroutine complete and
read from channel next hunged goroutine write data to goroutine.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;sem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;println(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;starting&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;sem&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Step&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Now&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;())&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sem&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/zpUiSJoPv3&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;h3 id=&#34;code-summary:374d01683790e6e902acefd695c3a4ba&#34;&gt;Code Summary&lt;/h3&gt;

&lt;p&gt;In context of writing to channels there are some important things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing to channels blocks&lt;/li&gt;
&lt;li&gt;If buffer is set (second param in &lt;code&gt;make&lt;/code&gt; function) writing is blocked after buffer is full
until that all goroutines can write to this channel.&lt;/li&gt;
&lt;li&gt;In our example all goroutines have started (5 are working, 15 are blocked on write)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Play around change buffer value to other, look how it will work with your changes.&lt;/p&gt;

&lt;h3 id=&#34;want-more:374d01683790e6e902acefd695c3a4ba&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang channels - quit channel</title>
      <link>http://wysocki.in/golang-channels-quit-channel</link>
      <pubDate>Thu, 26 Nov 2015 15:49:43 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-channels-quit-channel</guid>
      <description>

&lt;p&gt;Sometimes you may want to break your program running inside goroutine from
other goroutine or simply from main function. Below You can see My simple
implementation of go quit channel.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;quit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;quit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
				&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
				&lt;span style=&#34;color: #f8f8f2&#34;&gt;println(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
				&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Millisecond&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

	&lt;span style=&#34;color: #75715e&#34;&gt;// Do stuff&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #75715e&#34;&gt;// Quit goroutine&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;quit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/LCtaucaU65&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;h3 id=&#34;code-summary:56f482da4276e03cb54534c3a9fb674f&#34;&gt;Code Summary&lt;/h3&gt;

&lt;p&gt;In context of communicating from external goroutines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;select&lt;/code&gt; to read from multiple channels (in our example We only want
to break infinite loop)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt; is always run when there is no value from channel&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;want-more:56f482da4276e03cb54534c3a9fb674f&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang channels - rate limiting</title>
      <link>http://wysocki.in/golang-channels-rate-limiting</link>
      <pubDate>Thu, 26 Nov 2015 15:49:43 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-channels-rate-limiting</guid>
      <description>

&lt;p&gt;When you need to limit rate of operations done by your program (e.g. low resources
on node) go gives you very nice tool fo that. We&amp;rsquo;ll use &lt;code&gt;ticker&lt;/code&gt; which creates
a &lt;code&gt;time.Time&lt;/code&gt; channel and sends to it value with configured interval.&lt;/p&gt;

&lt;p&gt;First we add &lt;code&gt;50&lt;/code&gt; values to our requests channel. We know that there will not be
new data, so we can close channel. Next we define ticker and iterate through
our &lt;code&gt;requests&lt;/code&gt; channel.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;requests&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;requests&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;close(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;limiter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Tick&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Millisecond&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;requests&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;limiter&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;req&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Now&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;())&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/wHYHe_DA7s&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;h3 id=&#34;code-summary:2899a68356cc78ff99fd1c3cf580a0ab&#34;&gt;Code Summary&lt;/h3&gt;

&lt;p&gt;Why we simply don&amp;rsquo;t use &lt;code&gt;time.Sleep()&lt;/code&gt;? Ticker is better for that
because it can be canceled what gives us control over it.&lt;/p&gt;

&lt;h3 id=&#34;want-more:2899a68356cc78ff99fd1c3cf580a0ab&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang Channels - Basics</title>
      <link>http://wysocki.in/golang-channels-basics</link>
      <pubDate>Wed, 25 Nov 2015 16:56:07 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-channels-basics</guid>
      <description>

&lt;p&gt;Channels was made for synchronizing data between concurrently working goroutines (golang
light threads). By default operations on channel (reading and writing) are blocking.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look for simple example below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

    &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;doIt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Print&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;working...&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// send value to channel&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// We&amp;#39;re creating channel and&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// starting doIt function as gorouine&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;doIt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;done&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// reading from channel with `&amp;lt;-` blocks program until&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// we receive value after one second in `doIt` function&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;done&lt;/span&gt;
    	&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/gh5ihivC4L&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;h3 id=&#34;code-summary:b7f1cb643094ee3dbf988083964d7342&#34;&gt;Code Summary&lt;/h3&gt;

&lt;p&gt;This simple example contains several important points about channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go block on reading from channel&lt;/li&gt;
&lt;li&gt;There is no control of running goroutines, try to remove reading from channel (&lt;code&gt;a := &amp;lt;-done&lt;/code&gt;) You&amp;rsquo;ll see that your program will not complete &lt;code&gt;doIt&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;re passing channels to functions as something similar to reference (channels are
used on both sides - goroutine which write to channel, and goroutine which reads from it - main function in this example)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;want-more:b7f1cb643094ee3dbf988083964d7342&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang Channels - Receiving data</title>
      <link>http://wysocki.in/golang-channels-receiving-data-from-multiple-channels</link>
      <pubDate>Wed, 25 Nov 2015 16:56:07 +0100</pubDate>
      
      <guid>http://wysocki.in/golang-channels-receiving-data-from-multiple-channels</guid>
      <description>

&lt;p&gt;When we want to receive data from multiple channels (probably filled by
multiple goroutines) we should use &lt;code&gt;select&lt;/code&gt; statement. It simply choose
channel which receive value as first (It&amp;rsquo;s in context of time)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;c2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;c1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Sleep&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;c2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;msg1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;received&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;msg1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;msg2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
		&lt;span style=&#34;color: #a6e22e&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;received&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;msg2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p class=&#34;play-go&#34;&gt;
    &lt;a class=&#34;btn&#34; href=&#34;http://play.golang.org/p/wnusjAPW1g&#34; target=&#34;_new&#34;&gt;
        &lt;i class=&#34;fa fa-play-circle-o&#34;&gt;&lt;/i&gt; Run it on play.golang.org
    &lt;/a&gt;
&lt;/p&gt;


&lt;h3 id=&#34;code-summary:efe161ef779bd2b7a6dadc547c487606&#34;&gt;Code Summary&lt;/h3&gt;

&lt;p&gt;This simple example contains several important points about receiving data from
multiple channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select blocks until value will be sent through channel (whatever channel in case statement).&lt;/li&gt;
&lt;li&gt;In example above we read data from first channel which receive value (&lt;code&gt;msg2&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If we want receive from all channels, we should loop through select statement
as many times as many values we want to read.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;want-more:efe161ef779bd2b7a6dadc547c487606&#34;&gt;Want More?&lt;/h3&gt;

&lt;p&gt;If you like My Go basics series feel free to read more at &lt;a href=&#34;http://wysocki.in/series/go-basics/&#34;&gt;Go Basics Series&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://wysocki.in/contact/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/contact/</guid>
      <description>

&lt;h2 id=&#34;by-email:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;by Email&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;mailto:&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
var a = (&#39;jacek.wysocki&#39; + &#39;+blog@&#39; + &#39;gmail.com&#39;)
document.write(&#39;&lt;a href=&#34;mailto:&#39; + a + &#39;&#34;&gt;&#39; + a + &#39;&lt;/a&gt;&#39;)
&lt;/script&gt;

&lt;p&gt;&lt;NOSCRIPT&gt;
    &lt;em&gt;Email address protected by JavaScript.&lt;BR&gt;
    Please enable JavaScript to contact me.&lt;/em&gt;
&lt;/NOSCRIPT&gt;&lt;/p&gt;

&lt;h2 id=&#34;social-media:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Social media&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://twitter.com/ex00&#34;&gt;ex00@twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/exu&#34;&gt;exu@github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Golang SQL handling with sqlx package</title>
      <link>http://wysocki.in/database/2015/01/golang-sqlx/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/database/2015/01/golang-sqlx/</guid>
      <description>&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;&lt;code&gt;Sqlx&lt;/code&gt; little helper for your database problems&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
SQLX package will help you in several everyday jobs with
your SQL database. All examples below are &#34;copy-pastable&#34;
so you can write them to file and run by &lt;code&gt;go run filename.go&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-1&#34;&gt;Get dependencies&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-1&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;go get github.com/jmoiron/sqlx
go get github.com/go-sql-driver/mysql
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-2&#34;&gt;Init database&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-2&#34;&gt;
&lt;p&gt;
I&#39;m using MySQL/MariaDB in this example:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sql&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;CREATE&lt;/span&gt; DATABASE `sqlx_test`;
USE `sqlx_test`;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;TABLE&lt;/span&gt; `items` (
  `id` &lt;span style=&#34;color: #9dd7ff;&#34;&gt;int&lt;/span&gt;(11) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,
  `&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;` &lt;span style=&#34;color: #9dd7ff;&#34;&gt;varchar&lt;/span&gt;(255) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NULL&lt;/span&gt;,
  `description` longtext &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NULL&lt;/span&gt;,
  &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;KEY&lt;/span&gt; (`id`)
);
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INTO&lt;/span&gt; `items` (&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;, description) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;mechanical keyboard&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;good for writing code&#39;&lt;/span&gt;);
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INTO&lt;/span&gt; `items` (&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;, description) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;coffe&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;oh yummy!&#39;&lt;/span&gt;);
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INTO&lt;/span&gt; `items` (&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;, description) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;emacs&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;your favourite text editor&#39;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id=&#34;outline-container-sec-1-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-3&#34;&gt;SQLX provides several helpers&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-3&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-sec-1-3-1&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-1&#34;&gt;Mapping single result to struct with &lt;code&gt;Get&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-1&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;
&lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;I&#39;m using MySQL&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id            int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Name          sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Description   sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;Must.... functions will panic on fail&lt;/span&gt;
    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:PASSWORD@tcp(l:3306)/sqlx_test&#34;&lt;/span&gt;)
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;We&#39;ll get most recent item and map it into our struct&lt;/span&gt;
    err := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Get&lt;/span&gt;(&amp;amp;item, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;SELECT * FROM items ORDER BY id DESC LIMIT 1&#34;&lt;/span&gt;)
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }

    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;id: %d, %s, %s&#34;&lt;/span&gt;, item.Id, item.Name.String, item.Description.String)
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
write above content into file (&lt;code&gt;get.go&lt;/code&gt;) and run &lt;code&gt;go run get.go&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run get.go

id: 3, emacs, your favourite text editor
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div id=&#34;outline-container-sec-1-3-2&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-2&#34;&gt;Preparing statements with &lt;code&gt;Preparex&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-2&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id          int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Name        sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Description sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item

    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:root@tcp(127.0.0.1:3306)/sqlx_test&#34;&lt;/span&gt;)
    stmt, err := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Preparex&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;`SELECT * FROM items WHERE id=?`&lt;/span&gt;)

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;existing one&lt;/span&gt;
    err = stmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Get&lt;/span&gt;(&amp;amp;item, 1)
    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(item)

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;not existing one&lt;/span&gt;
    err = stmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Get&lt;/span&gt;(&amp;amp;item, 3)
    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(item)

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;handling non existing item&lt;/span&gt;
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err == sql.ErrNoRows {
        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;There is no row with id&#34;&lt;/span&gt;, 900)
    } &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Save above content into &lt;code&gt;prepare_x.go&lt;/code&gt; and run &lt;code&gt;go run prepare_x.go&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run prepare_x.go

{1 {mechanical keyboard true} {good for writing code true}}
{3 {emacs true} {your favourite text editor true}}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-1-3-3&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-3&#34;&gt;Querying row with &lt;code&gt;QueryRowx&lt;/code&gt; and &lt;code&gt;StructScan&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-3&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id          int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Name        sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Description sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item

    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:root@tcp(127.0.0.1:3306)/sqlx_test&#34;&lt;/span&gt;)

    row := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;QueryRowx&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;SELECT * FROM items WHERE id=?&#34;&lt;/span&gt;, 3)
    err := row.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;StructScan&lt;/span&gt;(&amp;amp;item)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }

    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(item)
}
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
and output after run:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run query_row_x.go

{3 {emacs true} {your favourite text editor true}}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1-3-4&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-4&#34;&gt;Querying multiple rows with &lt;code&gt;Queryx&lt;/code&gt; and &lt;code&gt;StructScan&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-4&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;

&lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;We&#39;re using MySQL&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;We can map columns to fields&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id  int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Nme sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Dsc sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {

    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:root@tcp(127.0.0.1:3306)/sqlx_test&#34;&lt;/span&gt;)
    rows, err := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Queryx&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;SELECT id, name, description FROM items&#34;&lt;/span&gt;)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;for&lt;/span&gt; rows.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Next&lt;/span&gt;() {
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item
        err = rows.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;StructScan&lt;/span&gt;(&amp;amp;item)

        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
            &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
        }

        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(
            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;%d - %s:  %s\n===================\n&#34;&lt;/span&gt;,
            item.Id,
            item.Nme.String,
            item.Dsc.String,
        )
    }
}
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
output:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run query_x.go

1 - mechanical keyboard:  good for writing code
===================
2 - coffe:  oh yummy!
===================
3 - emacs:  your favourite text editor
===================
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id=&#34;outline-container-sec-1-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-4&#34;&gt;If you want to check other things feel free to&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-4&#34;&gt;
&lt;p&gt;
&lt;code&gt;godoc -goroot=$GO github.com/jmoiron/sqlx&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Golang SQL handling with sqlx package</title>
      <link>http://wysocki.in/golang-sqlx</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/golang-sqlx</guid>
      <description>&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;&lt;code&gt;Sqlx&lt;/code&gt; little helper for your database problems&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
SQLX package will help you in several everyday jobs with
your SQL database. All examples below are &#34;copy-pastable&#34;
so you can write them to file and run by &lt;code&gt;go run filename.go&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-1&#34;&gt;Get dependencies&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-1&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;go get github.com/jmoiron/sqlx
go get github.com/go-sql-driver/mysql
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-2&#34;&gt;Init database&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-2&#34;&gt;
&lt;p&gt;
I&#39;m using MySQL/MariaDB in this example:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sql&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;CREATE&lt;/span&gt; DATABASE `sqlx_test`;
USE `sqlx_test`;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;TABLE&lt;/span&gt; `items` (
  `id` &lt;span style=&#34;color: #9dd7ff;&#34;&gt;int&lt;/span&gt;(11) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,
  `&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;` &lt;span style=&#34;color: #9dd7ff;&#34;&gt;varchar&lt;/span&gt;(255) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NULL&lt;/span&gt;,
  `description` longtext &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;NULL&lt;/span&gt;,
  &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;KEY&lt;/span&gt; (`id`)
);
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INTO&lt;/span&gt; `items` (&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;, description) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;mechanical keyboard&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;good for writing code&#39;&lt;/span&gt;);
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INTO&lt;/span&gt; `items` (&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;, description) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;coffe&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;oh yummy!&#39;&lt;/span&gt;);
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;INTO&lt;/span&gt; `items` (&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;name&lt;/span&gt;, description) &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;emacs&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;your favourite text editor&#39;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id=&#34;outline-container-sec-1-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-3&#34;&gt;SQLX provides several helpers&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-3&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-sec-1-3-1&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-1&#34;&gt;Mapping single result to struct with &lt;code&gt;Get&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-1&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;
&lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;I&#39;m using MySQL&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id            int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Name          sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Description   sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;Must.... functions will panic on fail&lt;/span&gt;
    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:PASSWORD@tcp(l:3306)/sqlx_test&#34;&lt;/span&gt;)
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;We&#39;ll get most recent item and map it into our struct&lt;/span&gt;
    err := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Get&lt;/span&gt;(&amp;amp;item, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;SELECT * FROM items ORDER BY id DESC LIMIT 1&#34;&lt;/span&gt;)
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }

    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;id: %d, %s, %s&#34;&lt;/span&gt;, item.Id, item.Name.String, item.Description.String)
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
write above content into file (&lt;code&gt;get.go&lt;/code&gt;) and run &lt;code&gt;go run get.go&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run get.go

id: 3, emacs, your favourite text editor
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div id=&#34;outline-container-sec-1-3-2&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-2&#34;&gt;Preparing statements with &lt;code&gt;Preparex&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-2&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id          int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Name        sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Description sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item

    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:root@tcp(127.0.0.1:3306)/sqlx_test&#34;&lt;/span&gt;)
    stmt, err := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Preparex&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;`SELECT * FROM items WHERE id=?`&lt;/span&gt;)

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;existing one&lt;/span&gt;
    err = stmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Get&lt;/span&gt;(&amp;amp;item, 1)
    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(item)

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;not existing one&lt;/span&gt;
    err = stmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Get&lt;/span&gt;(&amp;amp;item, 3)
    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(item)

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;handling non existing item&lt;/span&gt;
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err == sql.ErrNoRows {
        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;There is no row with id&#34;&lt;/span&gt;, 900)
    } &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Save above content into &lt;code&gt;prepare_x.go&lt;/code&gt; and run &lt;code&gt;go run prepare_x.go&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run prepare_x.go

{1 {mechanical keyboard true} {good for writing code true}}
{3 {emacs true} {your favourite text editor true}}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-1-3-3&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-3&#34;&gt;Querying row with &lt;code&gt;QueryRowx&lt;/code&gt; and &lt;code&gt;StructScan&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-3&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id          int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Name        sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Description sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item

    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:root@tcp(127.0.0.1:3306)/sqlx_test&#34;&lt;/span&gt;)

    row := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;QueryRowx&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;SELECT * FROM items WHERE id=?&#34;&lt;/span&gt;, 3)
    err := row.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;StructScan&lt;/span&gt;(&amp;amp;item)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }

    fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Println&lt;/span&gt;(item)
}
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
and output after run:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run query_row_x.go

{3 {emacs true} {your favourite text editor true}}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1-3-4&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-1-3-4&#34;&gt;Querying multiple rows with &lt;code&gt;Queryx&lt;/code&gt; and &lt;code&gt;StructScan&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-1-3-4&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;database/sql&#34;&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/jmoiron/sqlx&#34;&lt;/span&gt;

&lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;We&#39;re using MySQL&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; _ &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/go-sql-driver/mysql&#34;&lt;/span&gt;

&lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;We can map columns to fields&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Item&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id  int            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;id&#34;`&lt;/span&gt;
    Nme sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;name&#34;`&lt;/span&gt;
    Dsc sql.NullString &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`db:&#34;description&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {

    db := sqlx.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;MustConnect&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;mysql&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;root:root@tcp(127.0.0.1:3306)/sqlx_test&#34;&lt;/span&gt;)
    rows, err := db.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Queryx&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;SELECT id, name, description FROM items&#34;&lt;/span&gt;)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;for&lt;/span&gt; rows.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Next&lt;/span&gt;() {
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; item Item
        err = rows.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;StructScan&lt;/span&gt;(&amp;amp;item)

        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
            &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
        }

        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(
            &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;%d - %s:  %s\n===================\n&#34;&lt;/span&gt;,
            item.Id,
            item.Nme.String,
            item.Dsc.String,
        )
    }
}
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
output:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run query_x.go

1 - mechanical keyboard:  good for writing code
===================
2 - coffe:  oh yummy!
===================
3 - emacs:  your favourite text editor
===================
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id=&#34;outline-container-sec-1-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-4&#34;&gt;If you want to check other things feel free to&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-4&#34;&gt;
&lt;p&gt;
&lt;code&gt;godoc -goroot=$GO github.com/jmoiron/sqlx&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Golang JSON RPC Services using net/rpc/jsonrpc</title>
      <link>http://wysocki.in/golang/2015/01/golang-net-rpc-jsonrpc/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/golang/2015/01/golang-net-rpc-jsonrpc/</guid>
      <description>&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;RPC or not to RPC&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
Yesterday I&#39;ve played with JSON RPC Server and decided that I&#39;ll write something
about it because didn&#39;t found much resources about writing this kind of services in Golang.
&lt;/p&gt;

&lt;p&gt;
As reference I&#39;ve used post from Michael Crosby  &lt;a href=&#34;http://crosbymichael.com/golang-json-rpc.html&#34;&gt;http://crosbymichael.com/golang-json-rpc.html&lt;/a&gt;
and I&#39;ve tuned it a little to work out of the box on recent Go (1.4).
&lt;/p&gt;


&lt;p&gt;
It&#39;s one file example so server is runned in go-routine (will close after
 execution of last line).
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;Arith&lt;/code&gt; code was borrowed from &lt;code&gt;all_test.go&lt;/code&gt; (in net/rpc/jsonrpc lib directory)
file for better post readability
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-1-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-1&#34;&gt;Working example (&lt;a href=&#34;https://github.com/exu/go-playground&#34;&gt;and many others&lt;/a&gt;)  can be found on my github account:&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-1&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/exu/go-playground/blob/master/47-json-rpc/rpc.go&#34;&gt;https://github.com/exu/go-playground/blob/master/47-json-rpc/rpc.go&lt;/a&gt;.
&lt;/p&gt;



&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; (
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;errors&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;log&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;net&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;net/rpc&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;net/rpc/jsonrpc&#34;&lt;/span&gt;
)

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Args&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    A, B int
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Reply&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    C int
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;int&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;ArithAddResp&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id     &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;interface&lt;/span&gt;{} &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`json:&#34;id&#34;`&lt;/span&gt;
    Result Reply       &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`json:&#34;result&#34;`&lt;/span&gt;
    Error  &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;interface&lt;/span&gt;{} &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`json:&#34;error&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; (t *&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;) &lt;span style=&#34;color: #a2d7fb;&#34;&gt;Add&lt;/span&gt;(args *Args, reply *Reply) error {
    reply.C = args.A + args.B
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; (t *&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;) &lt;span style=&#34;color: #a2d7fb;&#34;&gt;Mul&lt;/span&gt;(args *Args, reply *Reply) error {
    reply.C = args.A * args.B
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; (t *&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;) &lt;span style=&#34;color: #a2d7fb;&#34;&gt;Div&lt;/span&gt;(args *Args, reply *Reply) error {
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; args.B == 0 {
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;return&lt;/span&gt; errors.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;divide by zero&#34;&lt;/span&gt;)
    }
    reply.C = args.A / args.B
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; (t *&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;) &lt;span style=&#34;color: #a2d7fb;&#34;&gt;Error&lt;/span&gt;(args *Args, reply *Reply) error {
    &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;ERROR&#34;&lt;/span&gt;)
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;startServer&lt;/span&gt;() {
    arith := &lt;span style=&#34;color: #93e0e3;&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;)

    server := rpc.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;NewServer&lt;/span&gt;()
    server.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Register&lt;/span&gt;(arith)

    l, e := net.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Listen&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;tcp&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;:8222&#34;&lt;/span&gt;)
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; e != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        log.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;listen error:&#34;&lt;/span&gt;, e)
    }

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;for&lt;/span&gt; {
        conn, err := l.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Accept&lt;/span&gt;()
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
            log.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Fatal&lt;/span&gt;(err)
        }

        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;go&lt;/span&gt; server.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;ServeCodec&lt;/span&gt;(jsonrpc.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;NewServerCodec&lt;/span&gt;(conn))
    }
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;starting server in go routine (it ends on end&lt;/span&gt;
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;of main function&lt;/span&gt;
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;startServer&lt;/span&gt;()

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;now client part connecting to RPC service&lt;/span&gt;
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;and calling methods&lt;/span&gt;

    conn, err := net.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Dial&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;tcp&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;localhost:8222&#34;&lt;/span&gt;)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;defer&lt;/span&gt; conn.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Close&lt;/span&gt;()

    c := jsonrpc.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;NewClient&lt;/span&gt;(conn)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; reply Reply
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; args *Args
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;for&lt;/span&gt; i := 0; i &amp;lt; 11; i++ {
        &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;passing Args to RPC call&lt;/span&gt;
        args = &amp;amp;&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Args&lt;/span&gt;{7, i}

        &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;calling &#34;Arith.Mul&#34; on RPC server&lt;/span&gt;
        err = c.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Call&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;Arith.Mul&#34;&lt;/span&gt;, args, &amp;amp;reply)
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
            log.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;arith error:&#34;&lt;/span&gt;, err)
        }
        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;Arith: %d * %d = %v\n&#34;&lt;/span&gt;, args.A, args.B, reply.C)

        &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;calling &#34;Arith.Add&#34; on RPC server&lt;/span&gt;
        err = c.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Call&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;Arith.Add&#34;&lt;/span&gt;, args, &amp;amp;reply)
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
            log.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;arith error:&#34;&lt;/span&gt;, err)
        }
        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;Arith: %d + %d = %v\n&#34;&lt;/span&gt;, args.A, args.B, reply.C)

        &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;NL&lt;/span&gt;
        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;\033[33m%s\033[m\n&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;---------------&#34;&lt;/span&gt;)

    }
}
&lt;/pre&gt;
&lt;/div&gt;



&lt;p&gt;
When we run above program, we should receive:
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run rpc.go


Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;0&lt;/span&gt; = 0
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;0&lt;/span&gt; = 7
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;1&lt;/span&gt; = 7
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;1&lt;/span&gt; = 8
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;2&lt;/span&gt; = 14
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;2&lt;/span&gt; = 9
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;3&lt;/span&gt; = 21
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;3&lt;/span&gt; = 10
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;4&lt;/span&gt; = 28
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;4&lt;/span&gt; = 11
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;5&lt;/span&gt; = 35
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;5&lt;/span&gt; = 12
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;6&lt;/span&gt; = 42
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;6&lt;/span&gt; = 13
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;7&lt;/span&gt; = 49
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;7&lt;/span&gt; = 14
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;8&lt;/span&gt; = 56
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;8&lt;/span&gt; = 15
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;9&lt;/span&gt; = 63
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;9&lt;/span&gt; = 16
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;10&lt;/span&gt; = 70
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;10&lt;/span&gt; = 17
---------------
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Golang JSON RPC Services using net/rpc/jsonrpc</title>
      <link>http://wysocki.in/golang-net-rpc-jsonrpc</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/golang-net-rpc-jsonrpc</guid>
      <description>&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;RPC or not to RPC&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
Yesterday I&#39;ve played with JSON RPC Server and decided that I&#39;ll write something
about it because didn&#39;t found much resources about writing this kind of services in Golang.
&lt;/p&gt;

&lt;p&gt;
As reference I&#39;ve used post from Michael Crosby  &lt;a href=&#34;http://crosbymichael.com/golang-json-rpc.html&#34;&gt;http://crosbymichael.com/golang-json-rpc.html&lt;/a&gt;
and I&#39;ve tuned it a little to work out of the box on recent Go (1.4).
&lt;/p&gt;


&lt;p&gt;
It&#39;s one file example so server is runned in go-routine (will close after
 execution of last line).
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;Arith&lt;/code&gt; code was borrowed from &lt;code&gt;all_test.go&lt;/code&gt; (in net/rpc/jsonrpc lib directory)
file for better post readability
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-1-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-1-1&#34;&gt;Working example (&lt;a href=&#34;https://github.com/exu/go-playground&#34;&gt;and many others&lt;/a&gt;)  can be found on my github account:&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-1-1&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/exu/go-playground/blob/master/47-json-rpc/rpc.go&#34;&gt;https://github.com/exu/go-playground/blob/master/47-json-rpc/rpc.go&lt;/a&gt;.
&lt;/p&gt;



&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; (
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;errors&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;fmt&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;log&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;net&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;net/rpc&#34;&lt;/span&gt;
    &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;net/rpc/jsonrpc&#34;&lt;/span&gt;
)

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Args&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    A, B int
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Reply&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    C int
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;int&lt;/span&gt;

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #9dd7ff;&#34;&gt;ArithAddResp&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;struct&lt;/span&gt; {
    Id     &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;interface&lt;/span&gt;{} &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`json:&#34;id&#34;`&lt;/span&gt;
    Result Reply       &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`json:&#34;result&#34;`&lt;/span&gt;
    Error  &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;interface&lt;/span&gt;{} &lt;span style=&#34;color: #a5a5a5;&#34;&gt;`json:&#34;error&#34;`&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; (t *&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;) &lt;span style=&#34;color: #a2d7fb;&#34;&gt;Add&lt;/span&gt;(args *Args, reply *Reply) error {
    reply.C = args.A + args.B
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; (t *&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;) &lt;span style=&#34;color: #a2d7fb;&#34;&gt;Mul&lt;/span&gt;(args *Args, reply *Reply) error {
    reply.C = args.A * args.B
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; (t *&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;) &lt;span style=&#34;color: #a2d7fb;&#34;&gt;Div&lt;/span&gt;(args *Args, reply *Reply) error {
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; args.B == 0 {
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;return&lt;/span&gt; errors.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;divide by zero&#34;&lt;/span&gt;)
    }
    reply.C = args.A / args.B
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; (t *&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;) &lt;span style=&#34;color: #a2d7fb;&#34;&gt;Error&lt;/span&gt;(args *Args, reply *Reply) error {
    &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;ERROR&#34;&lt;/span&gt;)
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;startServer&lt;/span&gt;() {
    arith := &lt;span style=&#34;color: #93e0e3;&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Arith&lt;/span&gt;)

    server := rpc.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;NewServer&lt;/span&gt;()
    server.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Register&lt;/span&gt;(arith)

    l, e := net.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Listen&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;tcp&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;:8222&#34;&lt;/span&gt;)
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; e != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        log.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;listen error:&#34;&lt;/span&gt;, e)
    }

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;for&lt;/span&gt; {
        conn, err := l.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Accept&lt;/span&gt;()
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
            log.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Fatal&lt;/span&gt;(err)
        }

        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;go&lt;/span&gt; server.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;ServeCodec&lt;/span&gt;(jsonrpc.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;NewServerCodec&lt;/span&gt;(conn))
    }
}

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;main&lt;/span&gt;() {

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;starting server in go routine (it ends on end&lt;/span&gt;
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;of main function&lt;/span&gt;
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;startServer&lt;/span&gt;()

    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;now client part connecting to RPC service&lt;/span&gt;
    &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;and calling methods&lt;/span&gt;

    conn, err := net.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Dial&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;tcp&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;localhost:8222&#34;&lt;/span&gt;)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #93e0e3;&#34;&gt;panic&lt;/span&gt;(err)
    }
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;defer&lt;/span&gt; conn.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Close&lt;/span&gt;()

    c := jsonrpc.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;NewClient&lt;/span&gt;(conn)

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; reply Reply
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; args *Args
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;for&lt;/span&gt; i := 0; i &amp;lt; 11; i++ {
        &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;passing Args to RPC call&lt;/span&gt;
        args = &amp;amp;&lt;span style=&#34;color: #9dd7ff;&#34;&gt;Args&lt;/span&gt;{7, i}

        &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;calling &#34;Arith.Mul&#34; on RPC server&lt;/span&gt;
        err = c.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Call&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;Arith.Mul&#34;&lt;/span&gt;, args, &amp;amp;reply)
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
            log.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;arith error:&#34;&lt;/span&gt;, err)
        }
        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;Arith: %d * %d = %v\n&#34;&lt;/span&gt;, args.A, args.B, reply.C)

        &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;calling &#34;Arith.Add&#34; on RPC server&lt;/span&gt;
        err = c.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Call&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;Arith.Add&#34;&lt;/span&gt;, args, &amp;amp;reply)
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color: #b0deff;&#34;&gt;nil&lt;/span&gt; {
            log.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;arith error:&#34;&lt;/span&gt;, err)
        }
        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;Arith: %d + %d = %v\n&#34;&lt;/span&gt;, args.A, args.B, reply.C)

        &lt;span style=&#34;color: #5f7f5f;&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;NL&lt;/span&gt;
        fmt.&lt;span style=&#34;color: #a2d7fb;&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;\033[33m%s\033[m\n&#34;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;---------------&#34;&lt;/span&gt;)

    }
}
&lt;/pre&gt;
&lt;/div&gt;



&lt;p&gt;
When we run above program, we should receive:
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; go run rpc.go


Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;0&lt;/span&gt; = 0
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;0&lt;/span&gt; = 7
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;1&lt;/span&gt; = 7
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;1&lt;/span&gt; = 8
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;2&lt;/span&gt; = 14
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;2&lt;/span&gt; = 9
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;3&lt;/span&gt; = 21
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;3&lt;/span&gt; = 10
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;4&lt;/span&gt; = 28
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;4&lt;/span&gt; = 11
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;5&lt;/span&gt; = 35
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;5&lt;/span&gt; = 12
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;6&lt;/span&gt; = 42
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;6&lt;/span&gt; = 13
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;7&lt;/span&gt; = 49
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;7&lt;/span&gt; = 14
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;8&lt;/span&gt; = 56
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;8&lt;/span&gt; = 15
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;9&lt;/span&gt; = 63
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;9&lt;/span&gt; = 16
---------------
Arith: 7 * &lt;span style=&#34;color: #e2b1f4;&#34;&gt;10&lt;/span&gt; = 70
Arith: 7 + &lt;span style=&#34;color: #e2b1f4;&#34;&gt;10&lt;/span&gt; = 17
---------------
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Real Programmers Explanation - What&#39;s http://xkcd.com/378/ about?</title>
      <link>http://wysocki.in/editor/2014/04/03-real-programmers-xkcd-explanation/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/editor/2014/04/03-real-programmers-xkcd-explanation/</guid>
      <description>&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;Emacs &lt;a href=&#34;http://xkcd.com/378/&#34;&gt;http://xkcd.com/378/&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
If you aren&#39;t emacs user it&#39;ll be incomprehensible for you. So here is explanation
I want to add that it&#39;s included in emacs core (no plugins required)
&lt;/p&gt;

&lt;img src=&#34;http://wysocki.in/img/m-x-butterfly-emacs.gif&#34; class=&#34;img-responsive&#34; alt=&#34;M-x butterfly Emacs command animation&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Real Programmers Explanation - What&#39;s http://xkcd.com/378/ about?</title>
      <link>http://wysocki.in/emacs-real-programmers-xkcd-explanation</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/emacs-real-programmers-xkcd-explanation</guid>
      <description>&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;Emacs &lt;a href=&#34;http://xkcd.com/378/&#34;&gt;http://xkcd.com/378/&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
If you aren&#39;t emacs user it&#39;ll be incomprehensible for you. So here is explanation
I want to add that it&#39;s included in emacs core (no plugins required)
&lt;/p&gt;

&lt;img src=&#34;http://wysocki.in/img/m-x-butterfly-emacs.gif&#34; class=&#34;img-responsive&#34; alt=&#34;M-x butterfly Emacs command animation&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>(Excercise 1 - Golang) Numbers statistics- Golang and Ginkgo</title>
      <link>http://wysocki.in/bdd-excercise-1-calc-bdd-in-golang-and-ginkgo</link>
      <pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/bdd-excercise-1-calc-bdd-in-golang-and-ginkgo</guid>
      <description>&lt;img src=&#34;http://wysocki.in/img/go-bdd.png&#34; class=&#34;img-responsive&#34; alt=&#34;&#34;&gt;

&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;Part 1 - Using Golang and Ginkgo&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
Your task is to process a sequence of integer numbers
to determine the following statistics:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;minimum value
&lt;/li&gt;
&lt;li&gt;maximum value
&lt;/li&gt;
&lt;li&gt;number of elements in the sequence
&lt;/li&gt;
&lt;li&gt;average value
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
For example: &lt;code&gt;[6, 9, 15, -2, 92, 11]&lt;/code&gt;
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;minimum value = -2
&lt;/li&gt;
&lt;li&gt;maximum value = 92
&lt;/li&gt;
&lt;li&gt;number of elements in the sequence = 6
&lt;/li&gt;
&lt;li&gt;average value = 21.833333
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;Start in Ginkgo&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-sec-2-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-2-1&#34;&gt;Setup your tools&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-2-1&#34;&gt;
&lt;p&gt;
In first excercise we&#39;ll do everything from scratch. First prepare your tools:
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2-1-1&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-2-1-1&#34;&gt;Project structure&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-2-1-1&#34;&gt;
&lt;p&gt;
First create project directory and cwd to it
and install testing framework.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;mkdir gobdds
&lt;span style=&#34;color: #93e0e3;&#34;&gt;cd&lt;/span&gt; gobdds

go get github.com/onsi/ginkgo/ginkgo
go get github.com/onsi/gomega
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
I&#39;m using Ginkgo as BDD framework and Gomega as matcher (assert) library
If You are familiar with Mocha or RSpec then tests written
in Ginkgo will be similiar.
&lt;/p&gt;

&lt;p&gt;
To simplify tests all files will be in the same folder
(I didin&#39;t check yet how to organize code with this technique).
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-txt&#34;&gt;. - your sources
gobdds_suite_test.go
stats.go
stats_test.go
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
If you check &lt;a href=&#34;http://wysocki.in/bdd-excercise-1-calc-bdd-in-php-with-phpspec&#34;&gt;PHP&lt;/a&gt; or &lt;a href=&#34;http://wysocki.in/bdd-excercise-1-calc-bdd-in-javascript-with-mocha&#34;&gt;JS&lt;/a&gt; sources with the same excercise you can
realize that naming (calc &lt;code&gt;=&lt;/code&gt; stats etc) is little odd it&#39;s because I don&#39;t have
enough time to polish these things up, sorry.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-2-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-2-2&#34;&gt;Spec your code&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-2-2&#34;&gt;
&lt;p&gt;
Now we can write some tests. First we create bootstrap like
in documentation import bddgo, and bdd framework and matcher
next we are doing simple describe for each expectation we
should collect new result.
&lt;/p&gt;

&lt;p&gt;
In &lt;code&gt;It&lt;/code&gt; function we&#39;ll define our first &lt;code&gt;min&lt;/code&gt; calculation
expectations.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-javascript&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;package&lt;/span&gt; bddgo_test

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;import&lt;/span&gt; (
    . &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/exu/bddgo&#34;&lt;/span&gt;
    . &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/onsi/ginkgo&#34;&lt;/span&gt;
    . &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;github.com/onsi/gomega&#34;&lt;/span&gt;
)

&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e2b1f4;&#34;&gt;_&lt;/span&gt; = Describe(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;Stats generator&#34;&lt;/span&gt;, func() {

})
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-2-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-2-3&#34;&gt;Our function result:&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-2-3&#34;&gt;
&lt;p&gt;
We create &lt;code&gt;collect&lt;/code&gt; method which will return
object with &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;avg&lt;/code&gt;,
&lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt; keys.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-2-4&#34;&gt;When We have plan, we can start writing specs&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-2-4&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-sec-2-4-1&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-2-4-1&#34;&gt;Prerequisities (creating matcher)&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-2-4-1&#34;&gt;
&lt;p&gt;
Our first task is to calculate minimum value from
given input.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2-4-2&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-2-4-2&#34;&gt;Min specification&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-2-4-2&#34;&gt;
&lt;p&gt;
Now We&#39;re ready for specifing. Inside &lt;code&gt;Describe&lt;/code&gt; function
block insert following code:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-javascript&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #e2b1f4;&#34;&gt;result&lt;/span&gt; map[string]&lt;span style=&#34;color: #9dd7ff;&#34;&gt;int&lt;/span&gt;
BeforeEach(func() {
    input := []&lt;span style=&#34;color: #9dd7ff;&#34;&gt;int&lt;/span&gt;{3, 3, 4, 5, 6, 99, -99, 7, 8, 64}
    result = Collect(input)
})

It(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;collects min information&#34;&lt;/span&gt;, func() {
    Expect(result[&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;min&#34;&lt;/span&gt;]).To(Equal(-99))
})
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;ginkgo
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
you can run it with standard &lt;code&gt;go test&lt;/code&gt; command
&lt;/p&gt;

&lt;p&gt;
Ginkgo should fail with message:
&lt;/p&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;./stats_test.go:30: undefined: Collect
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2-4-3&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-2-4-3&#34;&gt;Other specifications&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-2-4-3&#34;&gt;
&lt;ol class=&#34;org-ol&#34;&gt;
&lt;li&gt;With above technique We&#39;ll generate:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-golang&#34;&gt;It(&#34;collects max information&#34;, func() {
    Expect(result[&#34;max&#34;]).To(Equal(99))
})
It(&#34;collects avg information&#34;, func() {
    Expect(result[&#34;avg&#34;]).To(Equal(10))
})
It(&#34;collects len information&#34;, func() {
    Expect(result[&#34;len&#34;]).To(Equal(10))
})
It(&#34;collects sum information&#34;, func() {
    Expect(result[&#34;sum&#34;]).To(Equal(100))
})
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-2-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-2-5&#34;&gt;Writing code&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-2-5&#34;&gt;
&lt;p&gt;
Now our spec is ready - it&#39;ll be our library documentation - we can
start writing code.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Remember&lt;/b&gt; to run &lt;code&gt;ginkgo&lt;/code&gt; after each change.
&lt;/p&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-2-5-1&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-2-5-1&#34;&gt;Now it&#39;s time to implement minimum calculation from given input&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-2-5-1&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-golang&#34;&gt;package bddgo

func Collect(arr []int) map[string]int {
    out := make(map[string]int)
    min := arr[0]

    for _, v := range arr {
        if v &amp;lt; min {
            min = v
        }
    }

    out[&#34;min&#34;] = min

    return out
}
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
Run ginkgo, you&#39;ll receive error messages about
expected and current result.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;$ ginkgo

 collects max information [It]
  (/home/exu/go/src/github.com/exu/bddgo/stats_test.go:38)

  Expected
    &amp;lt;int&amp;gt;: 0
  to equal
    &amp;lt;int&amp;gt;: 99
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It looks like first test passed. Now it&#39;s time to implement rest
You can do it in little steps one by one, after each
run &lt;code&gt;ginkgo&lt;/code&gt; to check if you don&#39;t brake something
in other tests. (You can run it with &lt;code&gt;-watch&lt;/code&gt; - Ginkgo will watch
your suite and run tests automatically on code change)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-2-5-2&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-2-5-2&#34;&gt;Now it&#39;s time to implement rest of library:&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-2-5-2&#34;&gt;
&lt;p&gt;
Whole library looks like this one below:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-golang&#34;&gt;package bddgo

func Collect(arr []int) map[string]int {
    out := make(map[string]int)
    min, max, sum, count := arr[0], arr[0], 0, len(arr)

    for _, v := range arr {
        if v &amp;lt; min {
            min = v
        }
        if v &amp;gt; max {
            max = v
        }

        sum += v
    }

    out[&#34;min&#34;] = min
    out[&#34;len&#34;] = count
    out[&#34;avg&#34;] = sum / count
    out[&#34;max&#34;] = max
    out[&#34;sum&#34;] = max

    return out
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Run
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&amp;#10095; ginkgo

Running Suite: Bddgo Suite
==========================
Random Seed: 1394745662
Will run 5 of 5 specs

&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;&amp;#8226;
Ran 5 of 5 Specs&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt; in&lt;/span&gt; 0.004 seconds
SUCCESS! -- 5 Passed | 0 Failed | 0 Pending | 0 Skipped PASS

Ginkgo ran&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt; in&lt;/span&gt; 4.06565762s
Test Suite Passed
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now all tests should go green :D
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2-6&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-2-6&#34;&gt;Conslusions&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-2-6&#34;&gt;
&lt;p&gt;
You can compare Golang and Ginkgo BDD technique
with other in the same excercise
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;a href=&#34;http://wysocki.in/bdd-excercise-1-calc-bdd-in-php-with-phpspec&#34;&gt;PHP and PHPSpec&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wysocki.in/bdd-excercise-1-calc-bdd-in-javascript-with-mocha/&#34;&gt;Javascript with Mocha&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>