<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Behat on Jacek Wysocki DevLog</title>
    <link>http://wysocki.in/tags/behat/</link>
    <description>Recent content in Behat on Jacek Wysocki DevLog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Dec 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://wysocki.in/tags/behat/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Behat and PHPSpec example on simple task</title>
      <link>http://wysocki.in/behat-and-phpspec-example</link>
      <pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/behat-and-phpspec-example</guid>
      <description>&lt;div class=&#34;figure&#34;&gt;
&lt;p&gt;&lt;img src=&#34;http://wysocki.in/img/behat-screenshot-phpspec.png&#34; alt=&#34;behat-screenshot-phpspec.png&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;Introduction&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
Several days ago I was asked to write simple file parser. I&#39;ve thought that it could
be great excercise to try Behat with PHPSpec BDD tandem to write this library from scratch.
&lt;/p&gt;

&lt;p&gt;
You could get code used in this post from
my Github page: &lt;a href=&#34;https://github.com/exu/php-bdd-parser-example&#34;&gt;https://github.com/exu/php-bdd-parser-example&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;Lets setup some environment&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;p&gt;
This project is based on composer so you will need it. To
install composer. I prefer installing composer globally:
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;curl -sS https://getcomposer.org/installer | php
sudo mv composer.phar /usr/local/bin/composer
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
Next you should run &lt;code&gt;composer install&lt;/code&gt; command
to download and resolve all dependencies
(composer will do it automatically).
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;composer install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-3&#34;&gt;Next we should define some dependencies in Our project&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-3&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-json&#34;&gt;{
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;require&#34;&lt;/span&gt;: {
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;symfony/console&#34;&lt;/span&gt;: &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;*&#34;&lt;/span&gt;
    },

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;require-dev&#34;&lt;/span&gt; : {
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;behat/behat&#34;&lt;/span&gt;: &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;~2.5.0@stable&#34;&lt;/span&gt;,
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;phpspec/phpspec&#34;&lt;/span&gt;: &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;2.0.*@dev&#34;&lt;/span&gt;
    },

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;minimum-stability&#34;&lt;/span&gt;: &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;stable&#34;&lt;/span&gt;,

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;autoload&#34;&lt;/span&gt; : {
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;psr-0&#34;&lt;/span&gt; : {
            &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;&#34;&lt;/span&gt; : &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;src/&#34;&lt;/span&gt;,
            &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;Context&#34;&lt;/span&gt; : &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;features/&#34;&lt;/span&gt;
        }
    },

    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;config&#34;&lt;/span&gt;: {
        &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;bin-dir&#34;&lt;/span&gt;: &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;bin/&#34;&lt;/span&gt;
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
I want to output some
messages in shell so I&#39;ve included
symfony console component in &lt;code&gt;conposer.json&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-json&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;require&#34;&lt;/span&gt;: {
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;&#34;symfony/console&#34;&lt;/span&gt;: &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;*&#34;&lt;/span&gt;
},
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-4&#34;&gt;When composer dependencies are defined it&#39;s time to install them&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-4&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;composer install
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Composer will install all dependencies into &lt;code&gt;vendor&lt;/code&gt; directory
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id=&#34;outline-container-sec-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-5&#34;&gt;Our project is ready to go. Now its time to setup Behat&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-5&#34;&gt;
&lt;p&gt;
Put lines below into behat.yml file in root of your project directory.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-yaml&#34;&gt;&lt;span style=&#34;color: #e2b1f4;&#34;&gt;default&lt;/span&gt;:
    &lt;span style=&#34;color: #e2b1f4;&#34;&gt;paths&lt;/span&gt;:
        &lt;span style=&#34;color: #e2b1f4;&#34;&gt;features&lt;/span&gt;: features
    &lt;span style=&#34;color: #e2b1f4;&#34;&gt;context&lt;/span&gt;:
        &lt;span style=&#34;color: #e2b1f4;&#34;&gt;class&lt;/span&gt;: Context\FeatureContext
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-6&#34;&gt;Now it&#39;s time to write some features.&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-6&#34;&gt;
&lt;p&gt;
First We&#39;ll try to describe what Our library should do:
&lt;/p&gt;

&lt;p&gt;
File: &lt;code&gt;features/parser.feature&lt;/code&gt;
&lt;/p&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-feature&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;Feature:&lt;/span&gt;&lt;span style=&#34;color: #9dd7ff;&#34;&gt; Attachments parser&lt;/span&gt;
    As a software developer
    In order to find duplicate attachments content
    I should see ids of duplicated attachments
        separated by &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#34;space&#34;&lt;/span&gt; character
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Features files are in &lt;code&gt;Gherkin&lt;/code&gt; syntax. Their main task is to allow &#34;Non-tech&#34; people
to cooperate with &#34;Tech-people&#34; (Nerds, Geeks etc.). It&#39;s basically simple text
file with some syntax constrints. So you don&#39;t need fat IDE to write its content.
&lt;/p&gt;

&lt;p&gt;
So in one sentence: &#34;Feature file is business bridge to Our code&#34;.
It should be written (in most cases) by people responsible for defining
business part of your software - or with their close cooperation.
&lt;/p&gt;

&lt;p&gt;
Every feature file should respond to three basic questions
&lt;/p&gt;
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;b&gt;Who&lt;/b&gt; need this feature
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-feature&#34;&gt;As a ....................
&lt;/pre&gt;
&lt;/div&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;b&gt;Why&lt;/b&gt; He&#39;ll be need it
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-feature&#34;&gt;In order to  ....................
&lt;/pre&gt;
&lt;/div&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;b&gt;What&lt;/b&gt; benefits will it bring to Us
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-feature&#34;&gt;I need to .........................
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
If we are able to answer this questions we should
start wiritng scenarios (If no - probably your
feature request is incomplete and need more discussion
with your team).
&lt;/p&gt;

&lt;p&gt;
Scenarios are first Behat elements which
will be mapped to real PHP code.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-7&#34;&gt;Write some scenarios&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-7&#34;&gt;
&lt;p&gt;
Now it&#39;s time to describe what our
 software should do:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-feature&#34;&gt;&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;Scenario:&lt;/span&gt;&lt;span style=&#34;color: #a2d7fb;&#34;&gt; Displaying duplicates from file when duplicates are present&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;    Given&lt;/span&gt; There is file with lines:
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | line                |&lt;/span&gt;
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | Attachment id: 1    |&lt;/span&gt;
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | fsjdhf483493h934hfs |&lt;/span&gt;
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | sfwqus483493u934usf |&lt;/span&gt;
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | Attachment id: 2    |&lt;/span&gt;
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | fsjdhf483493h934hfs |&lt;/span&gt;
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | sfwqus483493u934usf |&lt;/span&gt;
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | Attachment id: 3    |&lt;/span&gt;
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | aasksdshfksjdhfkhds |&lt;/span&gt;
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | Attachment id: 4    |&lt;/span&gt;
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | sfwqus483493u934usf |&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;    When&lt;/span&gt; I run console sctipt
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;    Then&lt;/span&gt; I should see following output
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | output |&lt;/span&gt;
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | 1 2    |&lt;/span&gt;
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | 3      |&lt;/span&gt;
&lt;span style=&#34;color: #00bfff;&#34;&gt;     | 4      |&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You can write as many scenarios as you need - they should
cover all possible variants.
&lt;/p&gt;

&lt;p&gt;
Each scenario line is called &#34;Step&#34;. Steps are mapped
to PHP Context class methods (in &lt;code&gt;FeatureContext.php&lt;/code&gt; file).
&lt;/p&gt;

&lt;p&gt;
Steps are divided to following types:
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-7-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-7-1&#34;&gt;&lt;b&gt;Given&lt;/b&gt; steps&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-7-1&#34;&gt;
&lt;p&gt;
Our &lt;code&gt;Given&lt;/code&gt; steps
should always &lt;b&gt;setup&lt;/b&gt; Our environment. If you have system with database, often your Given
step inserts some data into it
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-7-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-7-2&#34;&gt;&lt;b&gt;When&lt;/b&gt; steps&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-7-2&#34;&gt;
&lt;p&gt;
&lt;code&gt;When&lt;/code&gt; steps are responsible for doing actions on your system.
In these steps you should run, load, click and do everything what
real user do with your application.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-7-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-7-3&#34;&gt;&lt;b&gt;Then&lt;/b&gt; steps&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-7-3&#34;&gt;
&lt;p&gt;
&lt;code&gt;Then&lt;/code&gt; steps are responsible for checking system result, in these
steps you should chceck if system output (HTML, JSON, shell results)
are meeting your expectations.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-8&#34;&gt;Next we can run Behat&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-8&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;bin/behat
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It gives us output about unimplemented methods.  It&#39;s
because we don&#39;t have any methods yet mapped to our steps
in feature file.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-8-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-8-1&#34;&gt;Steps mapping&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-8-1&#34;&gt;
&lt;p&gt;
Steps are mapped by from feature file into
PHP methods. It&#39;s done thanks to annotation
mechanism. Text after &lt;code&gt;@Given&lt;/code&gt;, &lt;code&gt;@When&lt;/code&gt;, &lt;code&gt;@Then&lt;/code&gt;, &lt;code&gt;@And&lt;/code&gt;
is regular expression, you can use groups which
will be mapped to method variables.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-php&#34;&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #5f7f5f;&#34;&gt; * &lt;/span&gt;&lt;span style=&#34;color: #b0deff; background-color: #0b0b0b;&#34;&gt;@When&lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt; /^I run console sctipt&lt;/span&gt;&lt;span style=&#34;color: #ffffff;&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #5f7f5f;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;iRunConsoleSctipt&lt;/span&gt;()
{
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&#34;outline-container-sec-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-9&#34;&gt;When we complete all needed scenarios we can run behat&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-9&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;bin/behat
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Command output:
&lt;/p&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;/**
 * @Given /^There is file with lines:$/
 */
public &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;thereIsFileWithLines&lt;/span&gt;(TableNode $&lt;span style=&#34;color: #e2b1f4;&#34;&gt;table&lt;/span&gt;)
{
    throw new PendingException();
}

/**
 * @When /^I run console sctipt$/
 */
public &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;iRunConsoleSctipt&lt;/span&gt;()
{
    throw new PendingException();
}

/**
 * @Then /^I should see following output$/
 */
public &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;iShouldSeeFollowingOutput&lt;/span&gt;(TableNode $&lt;span style=&#34;color: #e2b1f4;&#34;&gt;table&lt;/span&gt;)
{
    throw new PendingException();
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Behat gives us information about missing step methods which are connected to
steps in feature file.
&lt;/p&gt;

&lt;p&gt;
We can automatically append this output to Our Context class
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;bin/behat --append-snippets
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now our Context class have included step methods.
Methods will throw &lt;code&gt;PendingException&lt;/code&gt; exception,
so you&#39;ll need to implement them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-10&#34;&gt;Steps implementation&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-10&#34;&gt;
&lt;p&gt;
Look at &lt;code&gt;FeatureContext&lt;/code&gt; file to look at
steps implementation - it&#39;s really simople
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;b&gt;Given&lt;/b&gt; will reset your &lt;code&gt;attachments.txt&lt;/code&gt; file
in every step
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;When&lt;/b&gt; will run some action - in this step
it will be simple simple backtick PHP&#39;s exec.
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Then&lt;/b&gt; - will check output from &lt;b&gt;When&lt;/b&gt; step.
and will Throw Exception if output will be
different from expected one.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-11&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-11&#34;&gt;PHPSpec&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-11&#34;&gt;
&lt;p&gt;
When Behat goes red (there are errors we&#39;ll implement
our &lt;code&gt;Parser&lt;/code&gt; library in spec and make some runner in
&lt;code&gt;ParserCommand&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-11-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-11-1&#34;&gt;Create specification&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-11-1&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;Specification for Parser\Attachment created
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;in&lt;/span&gt; /srv/http/tmp/php-bdd-parser-example/spec/Parser/AttachmentSpec.php.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-11-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-11-2&#34;&gt;Describe what it should do&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-11-2&#34;&gt;
&lt;/div&gt;&lt;div id=&#34;outline-container-sec-11-2-1&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-11-2-1&#34;&gt;&lt;code&gt;it_is_initializable&lt;/code&gt; (autogenerated)&lt;/h4&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-11-2-2&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-11-2-2&#34;&gt;&lt;code&gt;it_should_detect_id_in_header_line&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-11-2-2&#34;&gt;
&lt;p&gt;
We need to detect ID in our file
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-11-2-3&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-11-2-3&#34;&gt;&lt;code&gt;it_should_return_false_when_no_header_detected&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-11-2-3&#34;&gt;
&lt;p&gt;
When line have no ID we return false
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-11-2-4&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;sec-11-2-4&#34;&gt;&lt;code&gt;it_should_collect_content_hashes_and_id_pairs&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;outline-text-4&#34; id=&#34;text-11-2-4&#34;&gt;
&lt;p&gt;
our &lt;code&gt;parseLine&lt;/code&gt; will function will use &lt;code&gt;getId&lt;/code&gt;
For last Attachment we will always map rest
of content to last parsed ID.
&lt;/p&gt;

&lt;p&gt;
Result should be array with content hash
as keys and attachment ids as array elements
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-11-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-11-3&#34;&gt;Implement your specification to pass&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-11-3&#34;&gt;
&lt;p&gt;
You&#39;ll need to complete all written specs to
get green. When you do it your software is complete
refer to &lt;a href=&#34;https://github.com/exu/php-bdd-parser-example/blob/master/spec/Parser/AttachmentSpec.php&#34;&gt;Parser/AttachmentSpec specification&lt;/a&gt; and related
&lt;a href=&#34;https://github.com/exu/php-bdd-parser-example/blob/master/src/Parser/Attachment.php&#34;&gt;Parser/Attchment&lt;/a&gt; class (and of course to &lt;a href=&#34;http://phpspec.net&#34;&gt;PHPSpec documentation&lt;/a&gt;)
&lt;/p&gt;


&lt;p&gt;
Succesfull output should look like this:
&lt;img src=&#34;http://wysocki.in/img/phpspec-success-output.png&#34; alt=&#34;phpspec-success-output.png&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-11-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-11-4&#34;&gt;Shell runner&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-11-4&#34;&gt;
&lt;p&gt;
Behat will run additional file in shell,
so we must create new shell command. I&#39;ve
used symfony command component (It&#39;s really
great for this job).
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;bin/console parser
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
More details how to create symfony you couldreally early
find in &lt;a href=&#34;http://wysocki.in/symfony2-console-as-standalone-component/&#34;&gt;Using Symfony2 Console as standalone component&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-12&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-12&#34;&gt;Profits?&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-12&#34;&gt;
&lt;p&gt;
This example is really simple, but it gives Us
control over development workflow (why, who, how).
Specification is our documentation for other developers
and feature files could be easily presented to
non-tech team members.
&lt;/p&gt;



&lt;p&gt;
Entry point and setup could be time consuming,
but You will see profits really early as enhanced
quality of your software.
&lt;/p&gt;


&lt;p&gt;
In real world you need to unleash the Selenium and some headless browser drivers, if
your system will not be recent framework based you will
need to handle database reset and write steps implementation
which will be adding necesarry data, you can have
more than one database and probably you will need to
handle with many more (sometimes crazy) things. But I think
that it&#39;s worth it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Symfony2 Behat - check checkbox if not checked yet (with onclick event)</title>
      <link>http://wysocki.in/symfony2-behat-check-checkbox-if-not-checked-yet-with-onclick-event</link>
      <pubDate>Fri, 07 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://wysocki.in/symfony2-behat-check-checkbox-if-not-checked-yet-with-onclick-event</guid>
      <description>&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;&#39;I check &#34;checkbox\&lt;sub&gt;id&lt;/sub&gt;&#34;&#39; doesn&#39;t work for me&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
Behat includes method for checking checkboxes, but it have one disadvantage - when it is run on Selenium server
it only tacks checkbox value but don&#39;t fire onclick event. I write some small snippet to handle this flaw.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;Code snippet&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-php&#34;&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #5f7f5f;&#34;&gt; * &lt;/span&gt;&lt;span style=&#34;color: #b0deff; background-color: #0b0b0b;&#34;&gt;@When&lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt; /^I check &#34;([^&#34;]*)&#34; if not checked yet&lt;/span&gt;&lt;span style=&#34;color: #ffffff;&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color: #5f7f5f;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f7f5f;&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a2d7fb;&#34;&gt;iCheckIfNotCheckedYet&lt;/span&gt;(&lt;span style=&#34;color: #ffffff;&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #e2b1f4;&#34;&gt;id&lt;/span&gt;)
{
    &lt;span style=&#34;color: #ffffff;&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #e2b1f4;&#34;&gt;Page&lt;/span&gt; = &lt;span style=&#34;color: #ffffff;&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #b0deff;&#34;&gt;this&lt;/span&gt;-&amp;gt;&lt;span style=&#34;color: #cfcfcf; &#34;&gt;getSession&lt;/span&gt;()-&amp;gt;&lt;span style=&#34;color: #cfcfcf; background-color: #1f1f1f;&#34;&gt;getPage&lt;/span&gt;();
    &lt;span style=&#34;color: #ffffff;&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #e2b1f4;&#34;&gt;isChecked&lt;/span&gt; = &lt;span style=&#34;color: #ffffff;&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #e2b1f4;&#34;&gt;Page&lt;/span&gt;-&amp;gt;&lt;span style=&#34;color: #cfcfcf; &#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;css&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;input[type=&#34;checkbox&#34;]:checked#&#39;&lt;/span&gt; . &lt;span style=&#34;color: #ffffff;&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #e2b1f4;&#34;&gt;id&lt;/span&gt;);
    &lt;span style=&#34;color: #f0dfaf; font-weight: bold;&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color: #ffffff;&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #e2b1f4;&#34;&gt;isChecked&lt;/span&gt;) {
        &lt;span style=&#34;color: #ffffff;&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #e2b1f4;&#34;&gt;Page&lt;/span&gt;-&amp;gt;&lt;span style=&#34;color: #cfcfcf; &#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;css&#39;&lt;/span&gt;, &lt;span style=&#34;color: #a5a5a5;&#34;&gt;&#39;#&#39;&lt;/span&gt; . &lt;span style=&#34;color: #ffffff;&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #e2b1f4;&#34;&gt;id&lt;/span&gt;)-&amp;gt;&lt;span style=&#34;color: #cfcfcf; background-color: #1f1f1f;&#34;&gt;click&lt;/span&gt;();
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It checks if checkbox is checked, if not it fire click action on it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>